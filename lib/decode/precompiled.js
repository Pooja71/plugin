var dust = require("dustjs-linkedin");(function(){dust.register("file",body_0);function body_0(chk,ctx){return chk.write("/* TODO: resolve requestedFiles to merge(x,y,z) for multifile generator requests. *//* module.exports = imports; exports = module.exports; */").helper("injectLists",ctx,{},{"structs":ctx.get(["structs"], false)}).helper("injectFloatConversion",ctx,{},{"structs":ctx.get(["structs"], false)}).helper("injectFinals",ctx,{},{"structs":ctx.get(["structs"], false)}).section(ctx.get(["structs"], false),ctx,{"block":body_1},null).section(ctx.get(["structs"], false),ctx,{"block":body_2},null).section(ctx.get(["enums"], false),ctx,{"block":body_5},null).section(ctx.get(["enums"], false),ctx,{"block":body_6},null);}function body_1(chk,ctx){return chk.partial("struct/reader",ctx,null);}function body_2(chk,ctx){return chk.exists(ctx.get(["owner"], false),ctx,{"else":body_3,"block":body_4},null);}function body_3(chk,ctx){return chk.write("/** Expose ").reference(ctx.get(["name"], false),ctx,"h").write(" as a named export.*/exports.").reference(ctx.get(["name"], false),ctx,"h").write(" = exports['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}function body_4(chk,ctx){return chk.write("/** Expose ").reference(ctx.get(["name"], false),ctx,"h").write(" as a static member on its parent.*/exports['").reference(ctx.get(["owner"], false),ctx,"h").write("'].").reference(ctx.get(["name"], false),ctx,"h").write(" = exports['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}function body_5(chk,ctx){return chk.partial("enum/reader",ctx,null);}function body_6(chk,ctx){return chk.exists(ctx.get(["owner"], false),ctx,{"else":body_7,"block":body_8},null);}function body_7(chk,ctx){return chk.write("/** Expose ").reference(ctx.get(["name"], false),ctx,"h").write(" as a named export.*/exports.").reference(ctx.get(["name"], false),ctx,"h").write(" = exports['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}function body_8(chk,ctx){return chk.write("/** Expose ").reference(ctx.get(["name"], false),ctx,"h").write(" as a static member on its parent.*/exports['").reference(ctx.get(["owner"], false),ctx,"h").write("'].").reference(ctx.get(["name"], false),ctx,"h").write(" = exports['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}return body_0;})();
(function(){dust.register("enum/reader",body_0);function body_0(chk,ctx){return chk.write("exports['").reference(ctx.get(["id"], false),ctx,"h").write("'] = {").section(ctx.get(["enumerants"], false),ctx,{"block":body_1},null).write("};");}function body_1(chk,ctx){return chk.helper("enumerantName",ctx,{"block":body_2},null).write(" : ").reference(ctx.get(["$idx"], false),ctx,"h").helper("sep",ctx,{"block":body_3},null);}function body_2(chk,ctx){return chk.reference(ctx.get(["name"], false),ctx,"h");}function body_3(chk,ctx){return chk.write(",");}return body_0;})();
(function(){dust.register("far/begin",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0xfffffff8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 1] <<  8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 2] << 16) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 3] << 24))");}return body_0;})();
(function(){dust.register("far/deref",body_0);function body_0(chk,ctx){return chk.write("function (segments, segment, pointer) {var targetSegment, start, half;if (").partial("far/isNull",ctx,{"segment":"segment","pointer":"pointer"}).write(") {return ").reference(ctx.get(["nullValue"], false),ctx,"h").write(";}/*jshint -W018 */if (!").partial("far/is",ctx,{"segment":"segment","pointer":"pointer"}).write(") {/*jshint +W018 */targetSegment = segment;half = ").partial("list/objectHalfOffset",ctx,{"segment":"segment","pointer":"pointer"}).write(";start = pointer + 8 + half + half;} else {targetSegment = segments[").partial("far/targetId",ctx,{"segment":"segment","pointer":"pointer"}).write("];if (").partial("far/isDirect",ctx,{"segment":"segment","pointer":"pointer"}).write(") {pointer = ").partial("far/begin",ctx,{"segment":"segment","pointer":"pointer"}).write(";segment = targetSegment;half = ").partial("list/objectHalfOffset",ctx,{"segment":"segment","pointer":"pointer"}).write(";start = pointer + 8 + half + half;} else {pointer = ").partial("far/begin",ctx,{"segment":"segment","pointer":"pointer"}).write(";segment = targetSegment;targetSegment = segments[").partial("far/targetId",ctx,{"segment":"segment","pointer":"pointer"}).write("];start = ").partial("far/begin",ctx,{"segment":"segment","pointer":"pointer"}).write(";pointer += 8;}}/*jshint -W018 */if (!").partial(body_1,ctx,{"segment":"segment","pointer":"pointer"}).write(") {/*jshint +W018 */throw new TypeError('Pointer resolves to non-").reference(ctx.get(["derefType"], false),ctx,"h").write("');}").block(ctx.getBlock("derefBody"),ctx,{},null).write("return ").block(ctx.getBlock("derefReturns"),ctx,{},null).write(";};");}function body_1(chk,ctx){return chk.reference(ctx.get(["derefType"], false),ctx,"h").write("/is");}return body_0;})();
(function(){dust.register("far/is",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0x00000003) === 3)");}return body_0;})();
(function(){dust.register("far/isDirect",body_0);function body_0(chk,ctx){return chk.write("(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0x00000004)");}return body_0;})();
(function(){dust.register("far/isNull",body_0);function body_0(chk,ctx){return chk.write("(0 === (segment[pointer]| segment[pointer+1]| segment[pointer+2]| segment[pointer+3]| segment[pointer+4]| segment[pointer+5]| segment[pointer+6]| segment[pointer+7]| segment[pointer+8]))");}return body_0;})();
(function(){dust.register("far/targetId",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] >>> 0) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] <<  8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] << 16) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7] << 24))");}return body_0;})();
(function(){dust.register("list/AnyPointer",body_0);var blocks={"derefReturns":body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var Base = require('../base/List');var Any = require('../AnyPointer');var List = function (segments, segment, begin, length) {Base.call(this, segments, segment, begin, length);};List.prototype = Object.create(Base.prototype);List.prototype.get = function (index) {if (index<0 || this.__length<=index) {throw RangeError();}/** Use index as a register to record the pointer's first byte.*/index = this.__begin + ").helper("byteOffset",ctx,{},{"type":"AnyPointer","offset":"index"}).write(";return new Any(this.__segments, this.__segment, index);};List.deref = ").partial("far/deref",ctx,{"derefType":"list","nullValue":"new List(null, null, null, 0)"}).write("module.exports = List;");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new List(segments,targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(")");}return body_0;})();
(function(){dust.register("list/Data",body_0);var blocks={"derefReturns":body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var List = require('./UInt8');var Data = function (segments, segment, begin, length) {List.call(this, segments, segment, begin, length);};Data.prototype = new List();Object.defineProperty(Data.prototype, 'length', {get : function () { return this.__length; },set : function (value) { throw new Error('Readonly'); }});Data.prototype.get = function () {return this.__segment.subarray(this.__begin, this.__begin+this.__length);};Data.deref = ").partial("far/deref",ctx,{"derefType":"list","nullValue":"new Data(null, null, null, 0)"}).write("module.exports = Data;");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new Data(segments,targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(")");}return body_0;})();
(function(){dust.register("list/Nested",body_0);var blocks={"derefBody":body_1,"derefReturns":body_2};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var List = require('../base/List');module.exports = function (TerminalList) {function Nested(segments, segment, begin, length, depth) {this.__segments = segments;this.__segment = segment;this.__begin = begin;this.__length = length;this.__depth = depth;}Nested.prototype = new List();Object.defineProperty(Nested.prototype, 'length', {get : function () { return this.__length; },set : function () { throw new Error('Readonly'); }});Nested.prototype.get = function (index) {if (index<0 || this.__length<=index) {throw new RangeError();}if (this.__depth) {return Nested.deref(this.__segments, this.__segment, this.__begin + (index << 3), this.__depth-1);} else {return TerminalList.deref(this.__segments, this.__segment, this.__begin + (index << 3));}};Nested.deref = ").partial("far/deref",ctx,{"derefType":"list","nullValue":"new Nested(null, null, null, 0, null)"}).write("return Nested;};");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write(" var depth = arguments[3]; ");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new Nested(segments, targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(",depth)");}return body_0;})();
(function(){dust.register("list/Struct",body_0);var blocks={"derefBody":body_1,"derefReturns":body_2};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var Base = require('../base/List');module.exports = function (Reader) {function List(segments, segment, begin, length, dataBytes, pointerBytes) {Base.call(this, segments, segment, begin, length);this.__dataBytes = dataBytes;this.__pointerBytes = pointerBytes;this.__stride = dataBytes + pointerBytes;}List.prototype = Object.create(Base.prototype);List.prototype.get = function (index) {if (index<0 || this.__length<=index) {throw new RangeError();}return new Reader(this.__segments,this.__segment,this.__begin + this.__stride*index,this.__dataBytes,this.__pointerBytes);};List.deref = ").partial("far/deref",ctx,{"derefType":"list","nullValue":"new List(null, null, null, 0, null, null)"}).write("return List;};");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var dataBytes;switch (").partial("list/sizeEnum",ctx,{"segment":"segment","pointer":"pointer"}).write(") {case ").partial("list/elementSize",ctx,{"enumerant":"EMPTY"}).write(":dataBytes = 0; break;case ").partial("list/elementSize",ctx,{"enumerant":"BYTE"}).write(":dataBytes = 1; break;case ").partial("list/elementSize",ctx,{"enumerant":"TWO_BYTES"}).write(":dataBytes = 2; break;case ").partial("list/elementSize",ctx,{"enumerant":"FOUR_BYTES"}).write(":dataBytes = 4; break;case ").partial("list/elementSize",ctx,{"enumerant":"EIGHT_BYTES"}).write(":dataBytes = 8; break;case ").partial("list/elementSize",ctx,{"enumerant":"INLINE_COMPOSITE"}).write(":dataBytes = ").partial("struct/dataBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(";return new List(segments,targetSegment,start,").partial("struct/altCardinality",ctx,{"segment":"targetSegment","start":"start"}).write(",dataBytes,").partial("struct/pointerBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(");case elementSize.BIT:throw new Error('Bit alignment of packed lists is not supported');case elementSize.POINTER:throw new Error('Lists of pointers are specifically supported for each type, i.e. Nested, Text, and Data');default:throw new Error(\"Invalid message\");}");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new List(segments,targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(",dataBytes,0)");}return body_0;})();
(function(){dust.register("list/Text",body_0);var blocks={"derefReturns":body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var List = require('./UInt8');var decoder = new require('text-encoding').TextDecoder('utf-8');var Text = function (segments, segment, begin, length) {List.call(this, segments, segment, begin, length);};Text.prototype = new List();Object.defineProperty(Text.prototype, 'length', {get : function () { return this.__length - 1; },set : function (value) { throw new Error('Readonly'); }});Text.prototype.get = function () {return decoder.decode(this.getRaw());};Text.prototype.getRaw = function () {return this.__segment.subarray(this.__begin, this.__begin+this.__length-1);};Text.prototype.getRawNulled = function () {return this.__segment.subarray(this.__begin, this.__begin+this.__length);};Text.deref = ").partial("far/deref",ctx,{"derefType":"list","nullValue":"new Text(segments, segment, pointer, 1)"}).write("/** If null then use the null pointer's zeros with length 1 (null terminated* empty string).*/").write("module.exports = Text;");}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new Text(segments,targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(")");}return body_0;})();
(function(){dust.register("list/altBytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] & 0x00000007) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] <<  8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] << 16) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7] << 24))");}return body_0;})();
(function(){dust.register("list/begin",body_0);function body_0(chk,ctx){return chk.partial("list/offsetBytesIsNegative",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)}).write(" ?").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 8 - ").partial("list/offsetBytes",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)}).write(" : ").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 8 + ").partial("list/offsetBytes",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)});}return body_0;})();
(function(){dust.register("list/bytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] & 0xfffffff8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] <<  8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] << 16) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7] << 24))");}return body_0;})();
(function(){dust.register("list/cardinality",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] >>> 3) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] <<  5) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] << 13) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7] << 21))");}return body_0;})();
(function(){dust.register("list/elementSize",body_0);function body_0(chk,ctx){return chk.helper("select",ctx,{"block":body_1},{"key":body_10});}function body_1(chk,ctx){return chk.helper("eq",ctx,{"block":body_2},{"value":"EMPTY"}).helper("eq",ctx,{"block":body_3},{"value":"BIT"}).helper("eq",ctx,{"block":body_4},{"value":"BYTE"}).helper("eq",ctx,{"block":body_5},{"value":"TWO_BYTES"}).helper("eq",ctx,{"block":body_6},{"value":"FOUR_BYTES"}).helper("eq",ctx,{"block":body_7},{"value":"EIGHT_BYTES"}).helper("eq",ctx,{"block":body_8},{"value":"POINTER"}).helper("eq",ctx,{"block":body_9},{"value":"INLINE_COMPOSITE"});}function body_2(chk,ctx){return chk.write("            0 ");}function body_3(chk,ctx){return chk.write("              1 ");}function body_4(chk,ctx){return chk.write("             2 ");}function body_5(chk,ctx){return chk.write("        3 ");}function body_6(chk,ctx){return chk.write("       4 ");}function body_7(chk,ctx){return chk.write("      5 ");}function body_8(chk,ctx){return chk.write("          6 ");}function body_9(chk,ctx){return chk.write(" 7 ");}function body_10(chk,ctx){return chk.reference(ctx.get(["enumerant"], false),ctx,"h");}return body_0;})();
(function(){dust.register("list/is",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0x00000003) === 1)");}return body_0;})();
(function(){dust.register("list/objectHalfOffset",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0xfffffffc) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 1] <<  8) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 2] << 16) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 3] << 24)     )");}return body_0;})();
(function(){dust.register("list/primitive",body_0);var blocks={"derefReturns":body_3};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.exists(ctx.get(["type"], false),ctx,{"block":body_1},null);}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var Base = require('../base/List');var List = function (segments, segment, begin, length) {Base.call(this, segments, segment, begin, length);};List.prototype = Object.create(Base.prototype);List.prototype.get = function (index) {if (index<0 || this.__length<=index) {throw RangeError();}/** This kinda sucks--someday there should be an iterator interface to* avoid the frequent `stride*i` computations.  The `byteOffset` helper* has some goofy logic going on too, but it's still semantic.*//** Use index as a register to record the start of the struct's data* section.*/index = this.__begin + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":"index"}).write(";return ").partial(body_2,ctx,{"segment":"segment","begin":"index"}).write(";};List.deref = ").partial("far/deref",ctx,{"derefType":"list"}).write("module.exports = List;");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("primitive/").reference(ctx.get(["type"], false),ctx,"h");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new List(segments,targetSegment,start,").partial("list/cardinality",ctx,{"segment":"segment","pointer":"pointer"}).write(")");}return body_0;})();
(function(){dust.register("list/sizeEnum",body_0);function body_0(chk,ctx){return chk.write("(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] & 0x00000007)");}return body_0;})();
(function(){dust.register("primitive/Bool",body_0);function body_0(chk,ctx){return chk.write("/*jshint -W018 */(!!((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] & ").helper("boolMask",ctx,{},{"bitDistance":ctx.get(["offset"], false)}).write("))/*jshint +W018 */");}return body_0;})();
(function(){dust.register("primitive/Float32",body_0);function body_0(chk,ctx){return chk.write("decodeFloat32(").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(")");}return body_0;})();
(function(){dust.register("primitive/Float64",body_0);function body_0(chk,ctx){return chk.write("decodeFloat64(").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(")");}return body_0;})();
(function(){dust.register("primitive/Int16",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"skip":1}).write("] << 8))");}return body_0;})();
(function(){dust.register("primitive/Int32",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24))");}return body_0;})();
(function(){dust.register("primitive/Int64",body_0);function body_0(chk,ctx){return chk.write("[((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":4}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":5}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":6}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":7}).write("] << 24),((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24)]");}return body_0;})();
(function(){dust.register("primitive/Int8",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)");}return body_0;})();
(function(){dust.register("primitive/UInt16",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":"UInt16","offset":ctx.get(["offset"], false)}).write("] >>> 0) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":"UInt16","offset":ctx.get(["offset"], false),"skip":1}).write("] << 8))");}return body_0;})();
(function(){dust.register("primitive/UInt32",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24))");}return body_0;})();
(function(){dust.register("primitive/UInt64",body_0);function body_0(chk,ctx){return chk.write("[((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":4}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":5}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":6}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":7}).write("] << 24),((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24)]");}return body_0;})();
(function(){dust.register("primitive/UInt8",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)");}return body_0;})();
(function(){dust.register("primitive/Void",body_0);function body_0(chk,ctx){return chk.write("null");}return body_0;})();
(function(){dust.register("struct/altCardinality",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["start"], false),ctx,"h").write(" - 8] >>> 2) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["start"], false),ctx,"h").write(" - 7] <<  6) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["start"], false),ctx,"h").write(" - 6] << 14) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["start"], false),ctx,"h").write(" - 5] << 22))");}return body_0;})();
(function(){dust.register("struct/builder",body_0);function body_0(chk,ctx){return chk.write("var allocators = require('allocators');exports.List = function List(allocator, parentSegment, bytes) {this.segment = allocator.allocate(bytes);};").section(ctx.get(["structs"], false),ctx,{"block":body_1},null);}function body_1(chk,ctx){return chk.write("/*** @param ").reference(ctx.get(["Allocator"], false),ctx,"h").write(" allocator - Memory manager.* @param ").reference(ctx.get(["Uint8Array"], false),ctx,"h").write(" [parentSegment] - Segment of the ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder's* parent.*/// AnyPointer use case: build with parentSegment === undefined and set the// AnyPointer to the resultant.// One and only one allocator may own// slot.[struct display name for lookup purposes] function ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder(allocator, parentSegment) {// TODO: struct/bytes returns (dataWordCount + pointerCount) * 8this.segment = allocator.allocate(").helper("struct.bytes",ctx,{},{"struct":ctx.getPath(true, [])}).write(", parentSegment);// TODO: generalize struct/bytes to list/bytes, etc.// TODO: write zeros to data and pointer sections").section(ctx.getPath(false, ["field","slot"]),ctx,{"block":body_2},null).write("};").exists(ctx.get(["isRoot"], false),ctx,{"block":body_7},null);}function body_2(chk,ctx){return chk.exists(ctx.getPath(false, ["type","isPointer"]),ctx,{"else":body_3,"block":body_5},null);}function body_3(chk,ctx){return chk.exists(ctx.getPath(false, ["slot","defaultValue"]),ctx,{"block":body_4},null).write("Object.defineProperty(this, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () { return ").partial("struct/read",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write("; },set : function (value) { ").partial("struct/write",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write("; }});");}function body_4(chk,ctx){return chk.partial("struct/writeDefault",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write(";");}function body_5(chk,ctx){return chk.write("var rt = require('").reference(ctx.getPath(false, ["type","builder","runtimeSource"]),ctx,"h").write("');// TODO: struct/pointerDatum returns 8*dataWordCount + datumObject.defineProperty(this, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () {if (").partial("pointer/isNull",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment"}).write(") {// Struct case, this allocates the stack space for another object// List case, this allocates the heap space//  primitives case: encode list cardinality and byte size (allocator needs to know how many bytes to allocate too)").exists(ctx.getPath(false, ["type","list"]),ctx,{"block":body_6},null).write("// List of what? Need to pass in constructors to parametrize the thing.// List stride?var child = rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocator, this.segment); // ok for builders, ng lists//List: rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocatorif (allocator.isFar(child.segment, this.segment)) {// Don't implement hops here.//   That arises under orphans I assume.// Don't implement AnyPointers here.//   Can't know what builder construct.//   User must create the builder externally and directly attach it.var id = allocator.id(child.segment);return ").partial("pointer/terminalFar",ctx,{"target":"child.segment","id":"id"}).write("; // byteOffset on target yields offset} else { //struct/terminalFar or list/terminalFar...?var allocator.difference(child.segment, this.segment)return ").partial("pointer/local",ctx,{"source":"this.segment","target":"child.segment"}).write(";}}},set : function (value) {}").helper("struct.pointerDatum",ctx,{},{"words":ctx.get(["dataWordCount"], false),"datum":"8"}).write(";return this._").reference(ctx.get(["name"], false),ctx,"h").write(";},set : function (value) {this._").reference(ctx.get(["name"], false),ctx,"h").write(" = {value;}");}function body_6(chk,ctx){return chk.write(" var child = rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocator, this.segment, ").helper("listBytes",ctx,{},null).write("); ");}function body_7(chk,ctx){return chk.write("exports.").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder = ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder;").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder.psAllocation = function (pointerLength) {// @dataLengths populated by dataWordCount attribute of descendant structsvar allocator = new allocators.PointerSection(").helper("dataLengths",ctx,{},{"root":ctx.getPath(true, [])}).write(", pointerLength);return new ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder(allocator);};");}return body_0;})();
(function(){dust.register("struct/dataBytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] <<  3) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] << 11))");}return body_0;})();
(function(){dust.register("struct/field",body_0);function body_0(chk,ctx){return chk.write("/** Javascript doesn't cover the set of primitives, so perform the* default value XOR at the bytes level for conceptual simplicity.  This* is blocked awaiting encoding facilities, e.g.* ```* // Within {@defaultByte type=x value=y position=z}:* var encode = require('encode/primitive');* // encode the default value's string and return the byte at `position`.* ```*/Object.defineProperty(").reference(ctx.get(["target"], false),ctx,"h",["s"]).write(".prototype, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () {/** TODO: For all data section members use default values, e.g.* bytesOffset < {end} ? {this.__defAsdf[0]} ^ value[0] : {this.__def};*/").exists(ctx.get(["isDatum"], false),ctx,{"else":body_1,"block":body_10},null).write("},set : function () { throw new Error('Readonly'); }});");}function body_1(chk,ctx){return chk.section(ctx.getPath(true, []),ctx,{"block":body_2},{"segments":"this.__segments","segment":"this.__segment","begin":"this.__pointerSection"});}function body_2(chk,ctx){return chk.helper("select",ctx,{"block":body_3},{"key":ctx.get(["type"], false)});}function body_3(chk,ctx){return chk.helper("eq",ctx,{"block":body_4},{"value":"group"}).helper("eq",ctx,{"block":body_5},{"value":"List"}).helper("eq",ctx,{"block":body_6},{"value":"Text"}).helper("eq",ctx,{"block":body_7},{"value":"Data"}).helper("eq",ctx,{"block":body_8},{"value":"AnyPointer"}).helper("default",ctx,{"block":body_9},null);}function body_4(chk,ctx){return chk.write(" return new ").reference(ctx.get(["target"], false),ctx,"h",["s"]).write(".").reference(ctx.get(["name"], false),ctx,"h").write("(this); ");}function body_5(chk,ctx){return chk.write(" return ").helper("listType",ctx,{},{"elementType":ctx.get(["elementType"], false),"elementTypeId":ctx.get(["elementTypeId"], false),"depth":ctx.get(["depth"], false)}).write(".deref(").reference(ctx.get(["segments"], false),ctx,"h").write(", ").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("lsB",ctx,{},{"word":ctx.get(["offset"], false)}).write(", ").reference(ctx.get(["depth"], false),ctx,"h").write("); ");}function body_6(chk,ctx){return chk.write(" return Text.deref(").reference(ctx.get(["segments"], false),ctx,"h").write(", ").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("lsB",ctx,{},{"word":ctx.get(["offset"], false)}).write("); ");}function body_7(chk,ctx){return chk.write(" return Data.deref(").reference(ctx.get(["segments"], false),ctx,"h").write(", ").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("lsB",ctx,{},{"word":ctx.get(["offset"], false)}).write("); ");}function body_8(chk,ctx){return chk.write(" return AnyPointer.deref(").reference(ctx.get(["segments"], false),ctx,"h").write(", ").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("lsB",ctx,{},{"word":ctx.get(["offset"], false)}).write("); ");}function body_9(chk,ctx){return chk.write(" return exports['").reference(ctx.get(["typeId"], false),ctx,"h").write("'].deref(").reference(ctx.get(["segments"], false),ctx,"h").write(", ").reference(ctx.get(["segment"], false),ctx,"h").write(", ").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("lsB",ctx,{},{"word":ctx.get(["offset"], false)}).write("); ");}function body_10(chk,ctx){return chk.write("/* TODO: If the last bit of the sought datum runs off the end of the* data section, then provide the default value.  This probably* warrants some benchmarking.  Possible trick: impose on allocator* to put 0 into segments[0][0] so that default values have a* reliable zero to XOR against.  Under standard serialization,* these bytes are becomes unnecessary once cached.*/").helper("select",ctx,{"block":body_11},{"key":ctx.get(["type"], false)});}function body_11(chk,ctx){return chk.helper("eq",ctx,{"block":body_12},{"value":"union"}).helper("default",ctx,{"block":body_13},null);}function body_12(chk,ctx){return chk.write("return ").partial("primitive/UInt16",ctx,{"defaultValue":"0","segment":"this.__segment","begin":"this.__dataSection","end":"this.__pointerSection"}).write(";");}function body_13(chk,ctx){return chk.exists(ctx.get(["typeId"], false),ctx,{"else":body_14,"block":body_16},null);}function body_14(chk,ctx){return chk.write("return ").partial(body_15,ctx,{"defaultValue":ctx.get(["defaultValue"], false),"segment":"this.__segment","begin":"this.__dataSection","end":"this.__pointerSection"}).write(";");}function body_15(chk,ctx){return chk.write("primitive/").reference(ctx.get(["type"], false),ctx,"h");}function body_16(chk,ctx){return chk.write("return ").partial("primitive/UInt16",ctx,{"defaultValue":ctx.get(["defaultValue"], false),"segment":"this.__segment","begin":"this.__dataSection","end":"this.__pointerSection"}).write(";");}return body_0;})();
(function(){dust.register("struct/is",body_0);function body_0(chk,ctx){return chk.write("(!(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write("] & 0x00000003))");}return body_0;})();
(function(){dust.register("struct/pointerBytes",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] >>> 0) <<  3) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7]        << 11))");}return body_0;})();
(function(){dust.register("struct/reader",body_0);var blocks={"derefReturns":body_2};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("var Base = require('capnp-js/decode/base/Struct');/* Struct ").reference(ctx.get(["name"], false),ctx,"h").write(" */exports['").reference(ctx.get(["id"], false),ctx,"h").write("'] = function (segments, segment, start, dataBytes, pointerBytes) {this.__segments = segments;this.__segment = segment;this.__dataSection = start;this.__pointerSection = start + dataBytes;this.__end = this.__pointerSection + pointerBytes;};exports['").reference(ctx.get(["id"], false),ctx,"h").write("'].prototype = new Base();/** Map a `struct` pointer to a ").reference(ctx.get(["name"], false),ctx,"h").write(" reader.* * For `AnyPointer` loci, inspection of the pointer's A bits can dispatch*   here as needed.* @param {Uint8Array[]} segments - All of the message segments.* @param ").reference(ctx.get(["Uint8Array"], false),ctx,"h").write(" segment - Segment of memory containing the pointer.* @param ").reference(ctx.get(["Uint32"], false),ctx,"h").write(" pointer - Byte offset into `segment` to where the pointer* starts.*/exports['").reference(ctx.get(["id"], false),ctx,"h").write("'].deref = ").partial("far/deref",ctx,{"derefType":"struct","nullValue":body_1}).write("/** Empty struct gets treated like pre-@0 version--all defaults.*/").section(ctx.getPath(true, ["fields"]),ctx,{"block":body_3},null);}function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new exports['").reference(ctx.get(["id"], false),ctx,"h").write("'](null, null, null, 0, 0)");}function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("new exports['").reference(ctx.get(["id"], false),ctx,"h").write("'](segments,targetSegment,start,").partial("struct/dataBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(",").partial("struct/pointerBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(")");}function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.partial("struct/resolveField",ctx,{"target":body_4});}function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.write("exports['").reference(ctx.get(["id"], false),ctx,"h").write("']");}return body_0;})();
(function(){dust.register("struct/resolveField",body_0);function body_0(chk,ctx){return chk.helper("select",ctx,{"block":body_1},{"key":ctx.get(["type"], false)});}function body_1(chk,ctx){return chk.helper("eq",ctx,{"block":body_2},{"value":"union"}).helper("eq",ctx,{"block":body_8},{"value":"group"}).helper("default",ctx,{"block":body_12},null);}function body_2(chk,ctx){return chk.section(ctx.get(["fields"], false),ctx,{"block":body_3},null).partial("struct/field",ctx,{"name":"which"}).helper("provide",ctx,{"scope":body_5,"block":body_6},{"fields":ctx.get(["fields"], false)});}function body_3(chk,ctx){return chk.reference(ctx.get(["target"], false),ctx,"h",["s"]).write(".prototype.").helper("enumerantName",ctx,{"block":body_4},null).write("= ").reference(ctx.get(["discriminantValue"], false),ctx,"h").write(";");}function body_4(chk,ctx){return chk.reference(ctx.get(["name"], false),ctx,"h");}function body_5(chk,ctx){return chk.reference(ctx.get(["target"], false),ctx,"h",["s"]);}function body_6(chk,ctx){return chk.section(ctx.get(["fields"], false),ctx,{"block":body_7},null);}function body_7(chk,ctx){return chk.partial("struct/resolveField",ctx,{"target":ctx.get(["scope"], false)});}function body_8(chk,ctx){return chk.reference(ctx.get(["target"], false),ctx,"h",["s"]).write(".").reference(ctx.get(["name"], false),ctx,"h").write(" = function(parent) {this.__segments = root.__segments;this.__segment = root.__segment;this.__dataSection = root.__dataSection;this.__pointerSection = root.__pointerSection;this.__end = root.__end;};").section(ctx.get(["fields"], false),ctx,{"block":body_9},{"groupName":ctx.get(["name"], false)});}function body_9(chk,ctx){return chk.helper("provide",ctx,{"scope":body_10,"block":body_11},null);}function body_10(chk,ctx){return chk.reference(ctx.get(["target"], false),ctx,"h",["s"]).write(".").reference(ctx.get(["groupName"], false),ctx,"h");}function body_11(chk,ctx){return chk.partial("struct/resolveField",ctx,{"target":ctx.get(["scope"], false)});}function body_12(chk,ctx){return chk.partial("struct/field",ctx,null);}return body_0;})();