var Base = require('capnp-js/lib/base/Struct');

/* Struct {name} */
exports['{id}'] = function (segments, segment, start, dataBytes, pointerBytes) {
    this.__segments = segments;
    this.__segment = segment;
    this.__dataSection = start;
    this.__pointerSection = start + dataBytes;
    this.__end = this.__pointerSection + pointerBytes;
};

exports['{id}'].prototype = Object.create(Base.prototype);

/*
 * Map a `struct` pointer to a {name} reader.
 * * For `AnyPointer` loci, inspection of the pointer's A bits can dispatch
 *   here as needed.
 * @param {Uint8Array[]} segments - All of the message segments.
 * @param {Uint8Array} segment - Segment of memory containing the pointer.
 * @param {Uint32} pointer - Byte offset into `segment` to where the pointer
 * starts.
 */
exports['{id}'].deref = {>"far/deref" derefType="struct" nullValue="new exports['{id}'](null, null, null, 0, 0)"/}
    /*
     * Empty struct gets treated like pre-@0 version--all defaults.
     */
    {<derefReturns}
        new exports['{id}'](
            segments,
            targetSegment,
            start,
            {>"struct/dataBytes" segment="segment" pointer="pointer"/},
            {>"struct/pointerBytes" segment="segment" pointer="pointer"/})
    {/derefReturns}

{#.fields}
    {>"struct/resolveField" target="exports['{id}']"/}
{/.fields}
