{@select key=type}
{@eq value="union"}
    {#fields}
        {target|s}.prototype.{@enumerantName}{name}{/enumerantName}
            = {discriminantValue};
    {/fields}

    {>"struct/field" name="which"/}

    {@provide fields=fields}
        {#fields}
            {! Recur here to admit the possibility of nested unions !}
            {>"struct/resolveField" target=scope/}
        {/fields}
    {:scope}
        {target|s}
    {/provide}
{/eq}
{@eq value="group"}
    {target|s}.{name} = function(parent) {
        this.__segments = root.__segments;
        this.__segment = root.__segment;
        this.__dataSection = root.__dataSection;
        this.__pointerSection = root.__pointerSection;
        this.__end = root.__end;
    };

    {#fields groupName=name}
        {@provide}
            {>"struct/resolveField" target=scope/}
        {:scope}
            {target|s}.{groupName}
        {/provide}
    {/fields}
{/eq}
{@default}
    {>"struct/field"/}
{/default}
{/select}
