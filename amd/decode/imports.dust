define([{#.files}'../{name}.d/file'{/.files}{@sep}, {/sep}], function (
        {#.files}file{id}{/.files}{@sep}, {/sep}) {

/* Dump this by tracing the scope ids of resources up to their enclosing file.
 * Every member of this data structure should get incorporated into the owner of
 * `imports.js`.
 * {
 *     files : [{
 *         id : 129,
 *         name : 'name used to import (prefix `../` for code generation)',
 *         mergeIds : [{id : 'id of unqualified import', name : 'local pet-name'}, ...],
 *         ASIDE: Does an imported file's structs have their ids and petnames
 *                exposed natively to the root lexical scope, or do I need to
 *                hunt around?
 *         resources : [{
 *             id : 12,
 *             path : 'A.B.C'
 *         }, {
 *             id : 15,
 *             path : 'P.F.B'
 *         }, {
 *             ...
 *         }]
 *     }, {
 *         ...
 *     }]
 * }
 */

    var resources = {
        {#.files}
            {#.resources fileId=id}
                {id} : file{fileId}.{path}{@sep},{/sep}
            {/.resources}
            {@sep},{/sep}
        {/.files}
    };

    var merges = [];
    {#.files}
        merges = merges.concat({mergeIds});
    {/.files}

    return {
        resource : function (id) { return resources[id]; },
        inject : function (target) {
            /* Tentative.  Adapt to the node structure when it emerges more precisely */
            merges.forEach(function (merge) {
                target[merge.name] = resources[merge.id];
            });
        }
    };
});
