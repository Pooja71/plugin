/*
  Sequential datagram requirement!
  Case 1: Calling RPC methods provided by others.
  Case 2: Hosting RPC methods for others to call.
  Case 3: Serializing messages for an external protocol to manage.
*/

/*
  Case 1:
  * WMessage's.
  * Pipelining.
  * No `wait` support, only asynchronous.
  * Can two calls get batched as a single payload (only justification that I can
  imagine for a `send()` method), or can messages get dispatched greedily?
  * What assurance do I have of execution ordering on the server matching that
  on the client?  Promise pipeline chains methods, but many results may support
  a particular method, rendering any logic that I can imagine indeterminate.
  Batching would provide this assurance, but for large payloads this may be
  undesirable.
*/

/*
  Case 2:
  * Requires implementing rpc-twoparty for JS.
  * RMessage's.
  * Server-side handling of the pipeline process--may be beneficial to avoid
  shot in the dark debugging of the client-only implementation.
*/

/*
  Case 3: Low hanging fruit--use Python and a templating language.
  * Prerequisite to others.
  * Serialize messages.
  * Unserialize messages.
  * Pack messages.
  * Unpack messages.
  * RMessage, WMessage, and Message.
*/

// Worker thread returns message.
// Socket.io returns message.
// WebRTC returns message.
// All cases trigger an event, dispatching the handler to do react.
var message = UInt8Array(100);
// RPC request fulfills a promise.
// Promise resolution pushes a message contents into the UI

var List = function () {
}

List.A

