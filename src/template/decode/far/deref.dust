{! Far pointer resolution.  Entering `derefBody`:
   * `segment` is the segment that contains the resolved pointer or tag.
   * `pointer` is the offset within `segment` to the resolved pointer or tag.
   * `targetSegment` is the segment that contains the resolved pointer's data.
   * `start` is the offset within `targetSegment` to the resolved pointer's
     data.
   Note that the offset bits from `segment[pointer]` may be zeroed if the
   pointer is double-far, so use `start` instead of computing a zero.
!}
function (segments, segment, pointer) {
    var targetSegment, start, half;
    if ({>"far/isNull" segment="segment" pointer="pointer"/}) {
        return {nullValue};
    }

    /*jshint -W018 */
    if (!{>"far/is" segment="segment" pointer="pointer"/}) {
    /*jshint +W018 */
        targetSegment = segment;
        half = {>"list/objectHalfOffset" segment="segment" pointer="pointer"/};
        start = pointer + 8 + half + half;
    } else {
        targetSegment = segments[{>"far/targetId" segment="segment" pointer="pointer"/}];
        if ({>"far/isDirect" segment="segment" pointer="pointer"/}) {
            pointer = {>"far/begin" segment="segment" pointer="pointer"/};
            segment = targetSegment;
            half = {>"list/objectHalfOffset" segment="segment" pointer="pointer"/};
            start = pointer + 8 + half + half;
        } else {
            pointer = {>"far/begin" segment="segment" pointer="pointer"/};
            segment = targetSegment;
            targetSegment = segments[{>"far/targetId" segment="segment" pointer="pointer"/}];
            start = {>"far/begin" segment="segment" pointer="pointer"/};
            pointer += 8;
        }
    }

    /*jshint -W018 */
    if (!{>"{derefType}/is" segment="segment" pointer="pointer"/}) {
    /*jshint +W018 */
        throw new TypeError('Pointer resolves to non-{derefType}');
    }

    {+derefBody/}

    return {+derefReturns/};
};
