var dust = require("dustjs-helpers");(function(){dust.register("constant",body_0);function body_0(chk,ctx){return chk.write("(function () {var T = asdf; // FIXME: resolve to type or decoderreturn T.deref(").reference(ctx.get(["bytes"], false),ctx,"h").write(",").reference(ctx.get(["bytes"], false),ctx,"h").write("[").reference(ctx.get(["segment"], false),ctx,"h").write("],").reference(ctx.get(["position"], false),ctx,"h").write(");})()");}return body_0;})();
(function(){dust.register("enumeration",body_0);function body_0(chk,ctx){return chk.write("(function () {var local = {};").reference(ctx.get(["enumerants"], false),ctx,"h").write(".forEach(function (enumerant, index) {local.").reference(ctx.get(["name"], false),ctx,"h").write("[enumerant] = index;});return local;})()");}return body_0;})();
(function(){dust.register("file",body_0);function body_0(chk,ctx){return chk.write("define(['capnp-js/encode/primitives', 'capnp-js/decode', './readerImports'], function (encode,                       decode,           imports) {/** Compiler dumps `./rpc.js` and `./rpcMethods.js.stub` (blank template for* implementing RPC methods).  The `rpc.js` imports `./rpcMethods.js` file uses this, including its* imports.*/var local = {};imports.inject(local);").section(ctx.getPath(true, ["nodes"]),ctx,{"block":body_1},{}).write("return local;});");}function body_1(chk,ctx){return chk.write("var ").reference(ctx.get(["name"], false),ctx,"h").write(" = ").partial("node",ctx,{}).write(";local.").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["name"], false),ctx,"h").write(";");}return body_0;})();
(function(){dust.register("imports",body_0);function body_0(chk,ctx){return chk.write("define([").section(ctx.getPath(true, ["files"]),ctx,{"block":body_1},{}).helper("sep",ctx,{"block":body_2},{}).write("], function (").section(ctx.getPath(true, ["files"]),ctx,{"block":body_3},{}).helper("sep",ctx,{"block":body_4},{}).write(") {/* Dump this by tracing the scope ids of resources up to their enclosing file.* Every member of this data structure should get incorporated into the owner of* `imports.js`.* {*     files : [{*         id : 129,*         name : 'name used to import (prefix `../` for code generation)',*         mergeIds : [{id : 'id of unqualified import', name : 'local pet-name'}, ...],*         ASIDE: Does an imported file's structs have their ids and petnames*                exposed natively to the root lexical scope, or do I need to*                hunt around?*         resources : [{*             id : 12,*             path : 'A.B.C'*         }, {*             id : 15,*             path : 'P.F.B'*         }, {*             ...*         }]*     }, {*         ...*     }]* }*/var resources = {").section(ctx.getPath(true, ["files"]),ctx,{"block":body_5},{}).write("};var merges = [];").section(ctx.getPath(true, ["files"]),ctx,{"block":body_9},{}).write("return {resource : function (id) { return resources[id]; },inject : function (target) {/* Tentative.  Adapt to the node structure when it emerges more precisely */merges.forEach(function (merge) {target[merge.name] = resources[merge.id];});}};});");}function body_1(chk,ctx){return chk.write("'../").reference(ctx.get(["name"], false),ctx,"h").write(".d/file'");}function body_2(chk,ctx){return chk.write(", ");}function body_3(chk,ctx){return chk.write("file").reference(ctx.get(["id"], false),ctx,"h");}function body_4(chk,ctx){return chk.write(", ");}function body_5(chk,ctx){return chk.section(ctx.getPath(true, ["resources"]),ctx,{"block":body_6},{"fileId":ctx.get(["id"], false)}).helper("sep",ctx,{"block":body_8},{});}function body_6(chk,ctx){return chk.reference(ctx.get(["id"], false),ctx,"h").write(" : file").reference(ctx.get(["fileId"], false),ctx,"h").write(".").reference(ctx.get(["path"], false),ctx,"h").helper("sep",ctx,{"block":body_7},{});}function body_7(chk,ctx){return chk.write(",");}function body_8(chk,ctx){return chk.write(",");}function body_9(chk,ctx){return chk.write("merges = merges.concat(").reference(ctx.get(["mergeIds"], false),ctx,"h").write(");");}return body_0;})();
(function(){dust.register("list",body_0);function body_0(chk,ctx){return chk.exists(ctx.getPath(true, ["type","meta"]),ctx,{"else":body_1,"block":body_2},{});}function body_1(chk,ctx){return chk.write("decode.lists.").reference(ctx.getPath(true, ["type"]),ctx,"h");}function body_2(chk,ctx){return chk.section(ctx.getPath(true, ["type"]),ctx,{"block":body_3},{});}function body_3(chk,ctx){return chk.helper("select",ctx,{"block":body_4},{"key":ctx.getPath(true, ["meta"])});}function body_4(chk,ctx){return chk.helper("eq",ctx,{"block":body_5},{"value":"list"}).helper("eq",ctx,{"block":body_6},{"value":"struct"});}function body_5(chk,ctx){return chk.write("decode.lists.pointer(").partial("structure/list",ctx,{}).write(")");}function body_6(chk,ctx){return chk.write("decode.lists.structure(").helper("contains",ctx,{"else":body_7,"block":body_8},{"key":ctx.getPath(true, ["id"]),"set":ctx.get(["localIds"], false)}).write(")");}function body_7(chk,ctx){return chk.write("imports.resource(").reference(ctx.getPath(true, ["id"]),ctx,"h").write(")");}function body_8(chk,ctx){return chk.reference(ctx.getPath(true, ["name"]),ctx,"h");}return body_0;})();
(function(){dust.register("node",body_0);function body_0(chk,ctx){return chk.helper("select",ctx,{"block":body_1},{"key":ctx.getPath(true, ["meta"])});}function body_1(chk,ctx){return chk.helper("eq",ctx,{"block":body_2},{"value":"struct"}).helper("eq",ctx,{"block":body_3},{"value":"enum"}).helper("eq",ctx,{"block":body_5},{"value":"const"});}function body_2(chk,ctx){return chk.partial("structure",ctx,{});}function body_3(chk,ctx){return chk.partial("enumeration",ctx,{}).exists(ctx.getPath(true, ["nodes"]),ctx,{"block":body_4},{});}function body_4(chk,ctx){return chk.helper("ctThrow",ctx,{},{"message":"Invariant violated: enum nodes cannot have any child nodes."});}function body_5(chk,ctx){return chk.partial("constant",ctx,{});}return body_0;})();
(function(){dust.register("structure",body_0);function body_0(chk,ctx){return chk.write("(function () {var Structure;var methods = {};").helper("neq",ctx,{"block":body_1},{"key":ctx.get(["discriminantCount"], false),"value":"0"}).section(ctx.getPath(true, ["fields"]),ctx,{"block":body_2},{}).write("Structure = structure(methods);").section(ctx.getPath(true, ["nodes"]),ctx,{"block":body_28},{}).write("return Structure;})()");}function body_1(chk,ctx){return chk.write("var decode_").reference(ctx.get(["name"], false),ctx,"h").write(" = decode.fields.uint16;methods.which = function () {var position = this.dataSection + ").reference(ctx.get(["discriminantOffset"], false),ctx,"h").write(";if (position < this.pointerSection) {return decode_").reference(ctx.get(["name"], false),ctx,"h").write("(0,this.segment,position);} else {return 0;}};");}function body_2(chk,ctx){return chk.exists(ctx.getPath(true, ["discriminantValue"]),ctx,{"block":body_3},{}).exists(ctx.getPath(true, ["meta"]),ctx,{"else":body_4,"block":body_21},{});}function body_3(chk,ctx){return chk.write("methods.is").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {return this.which() === ").reference(ctx.get(["discriminantValue"], false),ctx,"h").write(";};");}function body_4(chk,ctx){return chk.helper("select",ctx,{"block":body_5},{"key":ctx.getPath(true, ["type"])});}function body_5(chk,ctx){return chk.helper("eq",ctx,{"block":body_6},{"value":"group"}).helper("eq",ctx,{"block":body_7},{"value":"Data"}).helper("eq",ctx,{"block":body_8},{"value":"Text"}).helper("eq",ctx,{"block":body_9},{"value":"AnyPointer"}).helper("eq",ctx,{"block":body_10},{"value":"bool"}).helper("eq",ctx,{"block":body_11},{"value":"Int8"}).helper("eq",ctx,{"block":body_12},{"value":"Int16"}).helper("eq",ctx,{"block":body_13},{"value":"Int32"}).helper("eq",ctx,{"block":body_14},{"value":"Int64"}).helper("eq",ctx,{"block":body_15},{"value":"UInt8"}).helper("eq",ctx,{"block":body_16},{"value":"UInt16"}).helper("eq",ctx,{"block":body_17},{"value":"UInt32"}).helper("eq",ctx,{"block":body_18},{"value":"UInt64"}).helper("eq",ctx,{"block":body_19},{"value":"Float32"}).helper("eq",ctx,{"block":body_20},{"value":"Float64"});}function body_6(chk,ctx){return chk.write("var Group_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").partial("structure",ctx,{}).write(";methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {return new Group_").reference(ctx.get(["name"], false),ctx,"h").write("(this);};");}function body_7(chk,ctx){return chk.partial("structure/listField",ctx,{});}function body_8(chk,ctx){return chk.partial("structure/listField",ctx,{});}function body_9(chk,ctx){return chk.write("var Decode_").reference(ctx.get(["name"], false),ctx,"h").write(" = decode.AnyPointer;var default_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["defaultBytes"], false),ctx,"h").write(".map(function (b64) {return encode.base64(b64);});methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.pointersSection +").helper("math",ctx,{},{"key":ctx.get(["offset"], false),"method":"multiply","operand":"8"}).write(";if (position < this.end) {return Decode_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(this.segments,this.segment,position);} else {return Decode_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(default_").reference(ctx.get(["name"], false),ctx,"h").write(",default_").reference(ctx.get(["name"], false),ctx,"h").write("[").reference(ctx.get(["defaultSegment"], false),ctx,"h").write("],").reference(ctx.get(["defaultPosition"], false),ctx,"h").write(");}};");}function body_10(chk,ctx){return chk.write("methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.dataSection + ").helper("boolOffset",ctx,{},{"offset":ctx.get(["offset"], false)}).write(";if (position < this.pointersSection) {return fields.bool(this.segment,position,").helper("boolMask",ctx,{},{"offset":ctx.get(["offset"], false)}).write(");} else {return ").reference(ctx.get(["defaultValue"], false),ctx,"h").write(";}};");}function body_11(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.int8","byteCount":"1"});}function body_12(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.int16","byteCount":"2"});}function body_13(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.int32","byteCount":"4"});}function body_14(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.int64","byteCount":"8"});}function body_15(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.uint8","byteCount":"1"});}function body_16(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.uint16","byteCount":"2"});}function body_17(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.uint32","byteCount":"4"});}function body_18(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultValue"], false),"decoder":"fields.uint64","byteCount":"8"});}function body_19(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultBytes"], false),"decoder":"fields.float32","byteCount":"4"});}function body_20(chk,ctx){return chk.partial("structure/dataField",ctx,{"default":ctx.get(["defaultBytes"], false),"decoder":"fields.float64","byteCount":"8"});}function body_21(chk,ctx){return chk.helper("select",ctx,{"block":body_22},{"key":ctx.getPath(true, ["meta"])});}function body_22(chk,ctx){return chk.helper("eq",ctx,{"block":body_23},{"value":"struct"}).helper("eq",ctx,{"block":body_26},{"value":"list"}).helper("eq",ctx,{"block":body_27},{"value":"enum"});}function body_23(chk,ctx){return chk.write("var Structure_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").helper("contains",ctx,{"else":body_24,"block":body_25},{"key":ctx.get(["id"], false),"set":ctx.get(["localIds"], false)}).write("var default_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["defaultBytes"], false),ctx,"h").write(".map(function (b64) {return encode.base64(b64);});methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.pointersSection +").helper("math",ctx,{},{"key":ctx.get(["offset"], false),"method":"multiply","operand":"8"}).write(";if (position < this.end) {return Structure_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(this.segments,this.segment,position);} else {return Structure_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(default_").reference(ctx.get(["name"], false),ctx,"h").write(",default_").reference(ctx.get(["name"], false),ctx,"h").write("[").reference(ctx.get(["defaultSegment"], false),ctx,"h").write("],").reference(ctx.get(["defaultPosition"], false),ctx,"h").write(");}};");}function body_24(chk,ctx){return chk.write("decode.structure(imports.resource(").reference(ctx.get(["id"], false),ctx,"h").write("));");}function body_25(chk,ctx){return chk.write("decode.structure(").reference(ctx.get(["name"], false),ctx,"h").write(");");}function body_26(chk,ctx){return chk.write("var List_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").partial("list/reader",ctx,{}).write(";var default_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["defaultBytes"], false),ctx,"h").write(".map(function (b64) {return encode.base64(b64);});methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.pointersSection +").helper("math",ctx,{},{"key":ctx.get(["offset"], false),"method":"multiply","operand":"8"}).write(";if (position < this.end) {return List_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(this.segments,this.segment,position);} else {return List_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(default_").reference(ctx.get(["name"], false),ctx,"h").write(",default_").reference(ctx.get(["name"], false),ctx,"h").write("[").reference(ctx.get(["defaultSegment"], false),ctx,"h").write("],").reference(ctx.get(["defaultPosition"], false),ctx,"h").write(");}};");}function body_27(chk,ctx){return chk.partial("structure/dataField",ctx,{"decoder":"fields.uint16","byteCount":"2"});}function body_28(chk,ctx){return chk.write("Structure.").reference(ctx.get(["name"], false),ctx,"h").write(" = ").partial("node",ctx,{}).write(";");}return body_0;})();
(function(){dust.register("structure/dataField",body_0);function body_0(chk,ctx){return chk.write("var decoder_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["decoder"], false),ctx,"h").write(";methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.dataSection +").helper("math",ctx,{},{"key":ctx.get(["offset"], false),"method":"multiply","operand":ctx.get(["byteCount"], false)}).write(";if (position < this.pointersSection) {return decoder_").reference(ctx.get(["name"], false),ctx,"h").write("(").reference(ctx.get(["default"], false),ctx,"h").write(", this.segment, position);} else {return ").reference(ctx.get(["defaultValue"], false),ctx,"h").write(";}};");}return body_0;})();
(function(){dust.register("structure/listField",body_0);function body_0(chk,ctx){return chk.write("var Decode_").reference(ctx.get(["name"], false),ctx,"h").write(" = decode.lists.").reference(ctx.get(["type"], false),ctx,"h").write(";var default_").reference(ctx.get(["name"], false),ctx,"h").write(" = ").reference(ctx.get(["defaultBytes"], false),ctx,"h").write(".map(function (b64) {return encode.base64(b64);});methods.get").reference(ctx.get(["name"], false),ctx,"h").write(" = function () {").partial("struct/throwOnInactive",ctx,{"error":"Attempted to access an inactive union member"}).write("var position = this.pointersSection +").helper("math",ctx,{},{"key":ctx.get(["offset"], false),"method":"multiply","operand":"8"}).write(";if (position < this.end) {return Decode_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(this.segments,this.segment,position);} else {return Decode_").reference(ctx.get(["name"], false),ctx,"h").write(".deref(default_").reference(ctx.get(["name"], false),ctx,"h").write(",default_").reference(ctx.get(["name"], false),ctx,"h").write("[").reference(ctx.get(["defaultSegment"], false),ctx,"h").write("],").reference(ctx.get(["defaultPosition"], false),ctx,"h").write(");}};");}return body_0;})();
(function(){dust.register("structure/throwOnInactive",body_0);function body_0(chk,ctx){return chk.helper("neq",ctx,{"block":body_1},{"key":ctx.getPath(true, ["discriminantValue"]),"value":"65535"});}function body_1(chk,ctx){return chk.write("if (!this.is").reference(ctx.get(["name"], false),ctx,"h").write("()) {throw new Error(\"").reference(ctx.get(["error"], false),ctx,"h").write("\");}");}return body_0;})();