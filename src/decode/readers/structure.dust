(function () {

    var Structure =
        {^.meta}
            {! Group case !}
            decode.structure();
        {:else}
            {@eq key=.meta value="struct"}
                scope['{.id}'];
            {/eq}
        {/.meta}

    {#.nodes}
        {@eq key=.meta value="struct"}
            Structure.{.name} = {>"readers/node"/};
        {/eq}

        {@eq key=.meta value="enum"}
            Structure.{.name} = {>"readers/node"/};
        {/eq}

        {@eq key=.meta value="const"}
            Structure.prototype.{@constant name=.name/} = Structure.{@constant name=.name/} = constants['{.id}'];
        {/eq}
    {/.nodes}

    {?.discriminantCount}
        {@gt key=.discriminantCount value=0}
            var discriminant = decode.fields.uint16;
            Structure.prototype.which = function () {
                var position = this._dataSection +
                    {@math key=.discriminantOffset method="multiply" operand="2"/};

                if (position < this._pointersSection) {
                    return discriminant(
                        0,
                        this._segment,
                        position
                    );
                } else {
                    return 0;
                }
            };
        {/gt}
    {/.discriminantCount}

    {#.fields}
        {@ne key=.discriminantValue value=65535}
            {! Anonymous union member !}
            Structure.prototype.{@fieldIser name=.name/} = function () {
                return this.which() === {.discriminantValue};
            };
        {/ne}

        {?.meta}
            {@eq key=.meta value="struct"}
                var Structure_{@fieldGetter name=.name/} = scope['{.id}'];
                var default_{@fieldGetter name=.name/} = ['{@join array=.defaultSegments interpolator="','"/}']
                    .map(function (b64) { return encode.base64(b64); });

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    if (position < this._end && !decode.isNull(this._segment, position)) {
                        return Structure_{@fieldGetter name=.name/}.deref(
                            this._segments,
                            this._segment,
                            position
                        );
                    } else {
                        return Structure_{@fieldGetter name=.name/}.deref(
                            default_{@fieldGetter name=.name/},
                            default_{@fieldGetter name=.name/}[{.defaultSegment}],
                            {.defaultPosition}
                        );
                    }
                };
            {/eq}

            {@eq key=.meta value="list"}
                var List_{@fieldGetter name=.name/} = {>list/};
                var default_{@fieldGetter name=.name/} = ['{@join array=.defaultSegments interpolator="','"/}']
                    .map(function (b64) { return encode.base64(b64); });

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    if (position < this._end && !decode.isNull(this._segment, position)) {
                        return List_{@fieldGetter name=.name/}.deref(
                            this._segments,
                            this._segment,
                            position
                        );
                    } else {
                        return List_{@fieldGetter name=.name/}.deref(
                            default_{@fieldGetter name=.name/},
                            default_{@fieldGetter name=.name/}[{.defaultSegment}],
                            {.defaultPosition}
                        );
                    }
                };
            {/eq}

            {@eq key=.meta value="enum"}{>"readers/dataField" decoder="decode.fields.uint16" byteCount="2"/}{/eq}
        {:else}
            {@eq key=.type value="group"}
                var Group_{@fieldGetter name=.name/} = {>"readers/structure"/};
                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    return new Group_{@fieldGetter name=.name/}.inject(this);
                };
            {/eq}
            {@eq key=.type value="Data"}{>"readers/listField"/}{/eq}
            {@eq key=.type value="Text"}{>"readers/listField"/}{/eq}
            {@eq key=.type value="AnyPointer"}
                var Decode_{@fieldGetter name=.name/} = decode.AnyPointer;
                var default_{@fieldGetter name=.name/} = ['{@join array=.defaultSegments interpolator="','"/}']
                    .map(function (b64) { return encode.base64(b64); });

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    if (position < this._end) {
                        {!
                         ! Defer null pointer checking to `cast` (casting a null
                         ! pointer to a structure should yield an instance that
                         ! returns default fields.  Non-structure instances
                         ! should throw (a type byte of 0 implies a structure).
                         !}
                        return Decode_{@fieldGetter name=.name/}.deref(
                            this._segments,
                            this._segment,
                            position
                        );
                    } else {
                        return Decode_{@fieldGetter name=.name/}.deref(
                            default_{@fieldGetter name=.name/},
                            default_{@fieldGetter name=.name/}[{.defaultSegment}],
                            {.defaultPosition}
                        );
                    }
                };
            {/eq}

            {@eq key=.type value="Void"}
                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    return null;
                };
            {/eq}

            {@eq key=.type value="Bool"}
                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>"readers/throwOnInactive" error="Attempted to access an inactive union member"/}

                    var position = this._dataSection + {@boolOffset offset=.offset/};

                    if (position < this._pointersSection) {
                        return decode.fields.bool(
                            this._segment,
                            position,
                            {@boolMask offset=.offset/}
                        );
                    } else {
                        return {.defaultValue};
                    }
                };
            {/eq}

            {@eq key=.type value="Int8"}{>"readers/dataField"  default=.defaultValue decoder="decode.fields.int8"  byteCount="1"/}{/eq}
            {@eq key=.type value="Int16"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.int16" byteCount="2"/}{/eq}
            {@eq key=.type value="Int32"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.int32" byteCount="4"/}{/eq}
            {@eq key=.type value="Int64"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.int64" byteCount="8"/}{/eq}
            {@eq key=.type value="UInt8"}{>"readers/dataField"  default=.defaultValue decoder="decode.fields.uint8"  byteCount="1"/}{/eq}
            {@eq key=.type value="UInt16"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.uint16" byteCount="2"/}{/eq}
            {@eq key=.type value="UInt32"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.uint32" byteCount="4"/}{/eq}
            {@eq key=.type value="UInt64"}{>"readers/dataField" default=.defaultValue decoder="decode.fields.uint64" byteCount="8"/}{/eq}
            {@eq key=.type value="Float32"}{>"readers/dataField" default=.defaultBytes decoder="decode.fields.float32" byteCount="4"/}{/eq}
            {@eq key=.type value="Float64"}{>"readers/dataField" default=.defaultBytes decoder="decode.fields.float64" byteCount="8"/}{/eq}
        {/.meta}
    {/.fields}

    return Structure;
})()
