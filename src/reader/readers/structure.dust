(function () {

    var Structure =
        {^.meta}
            {! Group case !}
            reader.structure({
                meta : 0,
                dataBytes : {@math key=.dataWordCount method="multiply" operand=8/},
                pointersBytes : {@math key=.pointerCount method="multiply" operand=8/}
            });
        {:else}
            {@eq key=.meta value="struct"}
                scope['{.id}'];
            {/eq}
        {/.meta}

    {#.nodes}
        {@eq key=.meta value="struct"}
            Structure.{.name} = {>"readers/node"/};
        {/eq}

        {@eq key=.meta value="enum"}
            Structure.{.name} = {>"readers/node"/};
        {/eq}

        {@eq key=.meta value="const"}
            Structure.prototype.{@constant name=.name/} = Structure.{@constant name=.name/} = constants['{.id}'];
        {/eq}
    {/.nodes}

    {?.discriminantCount}
        {@gt key=.discriminantCount value=0}
            Structure.prototype.which = function () {
                var position = this._dataSection +
                    {@math key=.discriminantOffset method="multiply" operand="2"/};

                if (position < this._pointersSection) {
                    return reader.primitives.uint16(this._segment, position);
                } else {
                    return 0;
                }
            };
        {/gt}
    {/.discriminantCount}

    Structure.prototype._defaults = {};
    {#.fields}
        {@ne key=.discriminantValue value=65535}
            {! Union member !}
            Structure.{@constant name=.name/} = Structure.prototype.{@constant name=.name/} = {.discriminantValue};
            Structure.prototype.{@fieldIser name=.name/} = function () {
                return this.which() === {.discriminantValue};
            };
        {/ne}

        {?.meta}
            {@eq key=.meta value="enum"}
                {>"readers/dataField" default=.defaultValue decoder="reader.fields" method="uint16" byteCount="2"/}
            {:else}
                {@eq key=.meta value="struct"}
                    var Reader_{.name} = scope['{.id}'];
                    var defaultArena_{.name} = new Arena(
                        [fromBase64("{.defaultValue}")],
                        +Infinity,
                        +Infinity
                    );
                {/eq}

                {@eq key=.meta value="list"}
                    var Reader_{name} = {>"readers/list"/};
                    var defaultArena_{.name} = {>"readers/listDefaultArena"/};
                {/eq}

                Structure.prototype._defaults.{.name} = Reader_{.name}.deref(
                    defaultArena_{.name},
                    {
                        segment : defaultArena_{.name}.getSegment(0),
                        position : 0
                    },
                    0
                );

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    if (position < this._end && !reader.isNull(this._segment, position)) {
                        return Reader_{.name}.deref(
                            this._arena,
                            {
                                segment : this._segment,
                                position : position
                            },
                            this._depth + 1
                        );
                    } else {
                        return this._defaults.{.name};
                    }
                };

                Structure.prototype.{@fieldHaser name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    return position < this._end && !reader.isNull(this._segment, position);
                };
            {/eq}
        {:else}
            {@eq key=.type value="group"}
                var Group_{.name} = {>"readers/structure"/};

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return new Group_{.name}(
                        this._arena,
                        this._depth,
                        this._layout()
                    );
                };
            {/eq}
            {@eq key=.type value="Data"}{>"readers/listField"/}{/eq}
            {@eq key=.type value="Text"}{>"readers/listField"/}{/eq}
            {@eq key=.type value="AnyPointer"}
                var defaultArena_{.name} = {>"readers/listDefaultArena"/};

                Structure.prototype._defaults.{.name} = reader.AnyPointer.deref(
                    defaultArena_{.name},
                    {
                        segment : defaultArena_{.name}.getSegment(0),
                        position : 0
                    },
                    0
                );

                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._pointersSection +
                        {@math key=.offset method="multiply" operand="8"/};

                    if (position < this._end) {
                        {!
                         ! Defer null pointer checking to `cast` (casting a null
                         ! pointer to a structure should yield an instance that
                         ! returns default fields, with non-structure instances
                         ! throwing).
                         !}
                        return reader.AnyPointer.deref(
                            this._arena,
                            {
                                segment : this._segment,
                                position : position
                            },
                            this._depth + 1
                        );
                    } else {
                        return this._defaults.{.name};
                    }
                };
            {/eq}

            {@eq key=.type value="Void"}
                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return null;
                };
            {/eq}

            {@eq key=.type value="Bool"}
                Structure.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._dataSection + {@boolOffset offset=.offset/};

                    if (position < this._pointersSection) {
                        return reader.fields.bool(
                            {.defaultValue},
                            this._segment,
                            position,
                            {@boolMask offset=.offset/}
                        );
                    } else {
                        return !!{.defaultValue};
                    }
                };
            {/eq}

            {#. decoder="reader.fields"}
                {@eq key=.type value="Int8"}{>"readers/dataField"  default=.defaultValue method="int8"  byteCount="1"/}{/eq}
                {@eq key=.type value="Int16"}{>"readers/dataField" default=.defaultValue method="int16" byteCount="2"/}{/eq}
                {@eq key=.type value="Int32"}{>"readers/dataField" default=.defaultValue method="int32" byteCount="4"/}{/eq}
                {@eq key=.type value="Int64"}{>"readers/dataField" default=.defaultValue method="int64" byteCount="8"/}{/eq}
                {@eq key=.type value="UInt8"}{>"readers/dataField"  default=.defaultValue method="uint8"  byteCount="1"/}{/eq}
                {@eq key=.type value="UInt16"}{>"readers/dataField" default=.defaultValue method="uint16" byteCount="2"/}{/eq}
                {@eq key=.type value="UInt32"}{>"readers/dataField" default=.defaultValue method="uint32" byteCount="4"/}{/eq}
                {@eq key=.type value="UInt64"}{>"readers/dataField" default=.defaultValue method="uint64" byteCount="8"/}{/eq}
                {@eq key=.type value="Float32"}{>"readers/floatField" method="float32" byteCount="4"/}{/eq}
                {@eq key=.type value="Float64"}{>"readers/floatField" method="float64" byteCount="8"/}{/eq}
            {/.}
        {/.meta}
    {/.fields}

    return Structure;
})()
