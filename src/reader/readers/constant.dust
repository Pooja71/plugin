(function (types, parentScope, allocator) {
    {!
     ! TODO: Constant Sharing
     ! Non-inherit type implies that the constant can be reused across
     ! specializations.  This implementation allocates a new const for each
     ! specialization, regardless.  c1!==c2 does not imply that the two are not deep
     ! equivalent.  In the non-inherit case, are the types of the same constant on
     ! two specializations equivalent?  Yes--C++ semantics.  c1===c2 is
     ! inconsistent(?), but fine.
     !}

    {#.datum constName=.name}
        {?.meta}
            {@eq key=.meta value="enum"}
                return {.value};
            {/eq}

            {@eq key=.meta value="struct"}
                var arena = allocator._fromBase64("{.value}").asReader();

                parentScope.{constName} = {>"readers/scope" index="types" current="parentScope"/}._deref(
                    arena,
                    arena._root(),
                    0
                );
            {/eq}

            {@eq key=.meta value="list"}
                var arena = {>"readers/listArena"/};

                parentScope.{constName} = {>"readers/list"/}._deref(
                    arena,
                    arena._root(),
                    0
                );
            {/eq}
        {:else}
            {@provide}
                {@eq key=.type value="Text"}
                    var arena = {>"readers/listArena"/};
                    parentScope.{constName} = {blob|s};
                {/eq}
                {@eq key=.type value="Data"}
                    var arena = {>"readers/listArena"/};
                    parentScope.{constName} = {blob|s};
                {/eq}

                {@eq key=.type value="Void"}parentScope.{constName} = null;{/eq}
                {@eq key=.type value="Bool"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="Int8" }parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="Int16"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="Int32"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="Int64"}parentScope.{constName} = {.value|js};{/eq}
                {@eq key=.type value="UInt8" }parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="UInt16"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="UInt32"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="UInt64"}parentScope.{constName} = {.value|js};{/eq}
                {@eq key=.type value="Float32"}parentScope.{constName} = {.value};{/eq}
                {@eq key=.type value="Float64"}parentScope.{constName} = {.value};{/eq}
            {:blob}
                {@verbatim}
                    reader.{.type}._deref(
                        arena,
                        arena._root(),
                        0
                    )
                {/verbatim}
            {/provide}
        {/.meta}
    {/.datum}
})
