(function (types, parentScope, allocator) {
    {!
     ! TODO: Constant Sharing
     ! Non-inherit type implies that the constant can be reused across
     ! specializations.  This implementation allocates a new const for each
     ! specialization, regardless.  c1!==c2 does not imply that the two are not
     ! deep equivalent.  In the non-inherit case, are the types of the same
     ! constant on two specializations equivalent?  Yes--C++ semantics.  c1===c2
     ! is inconsistent(?), but fine.
     !}

    {@provide}
        {#.datum}
            {?.meta}
                {@eq key=.meta value="enum"}
                    {target} = {.value};
                {/eq}

                {@eq key=.meta value="struct"}
                    var arena = allocator._fromBase64("{.value}").asReader();

                    {target} = {>"generic/scope" source="reader" index="types" current="parentScope"/}._deref(
                        arena,
                        arena._root(),
                        0
                    );
                {/eq}

                {@eq key=.meta value="list"}
                    var arena = {>"readers/listArena"/};

                    {target} = {>"readers/list"/}._deref(
                        arena,
                        arena._root(),
                        0
                    );
                {/eq}
            {:else}
                {@eq key=.type value="Text"}
                    var arena = {>"readers/listArena"/};
                    {target} = {blob|s};
                {/eq}
                {@eq key=.type value="Data"}
                    var arena = {>"readers/listArena"/};
                    {target} = {blob|s};
                {/eq}

                {@eq key=.type value="Void"}{target} = null;{/eq}
                {@eq key=.type value="Bool"}{target} = {.value};{/eq}
                {@eq key=.type value="Int8" }{target} = {.value};{/eq}
                {@eq key=.type value="Int16"}{target} = {.value};{/eq}
                {@eq key=.type value="Int32"}{target} = {.value};{/eq}
                {@eq key=.type value="Int64"}{target} = {.value|js};{/eq}
                {@eq key=.type value="UInt8" }{target} = {.value};{/eq}
                {@eq key=.type value="UInt16"}{target} = {.value};{/eq}
                {@eq key=.type value="UInt32"}{target} = {.value};{/eq}
                {@eq key=.type value="UInt64"}{target} = {.value|js};{/eq}
                {@eq key=.type value="Float32"}{target} = {.value};{/eq}
                {@eq key=.type value="Float64"}{target} = {.value};{/eq}
            {/.meta}
        {/.datum}
    {:target}
        {@verbatim}
            parentScope.{@constant name=.name/} =
                parentScope.prototype.{@constant name=.name/}
        {/verbatim}
    {:blob}
        {@verbatim}
            reader.{.type}._deref(
                arena,
                arena._root(),
                0
            )
        {/verbatim}
    {/provide}
})
