(function (types, parentScope, allocator) {
    {?.discriminantCount}
        {@gt key=.discriminantCount value=0}
            parentScope.prototype.which = function () {
                var position = this._dataSection +
                    {@math key=.discriminantOffset method="multiply" operand="2"/};

                if (position < this._pointersSection) {
                    return reader.primitives.uint16(this._segment, position);
                } else {
                    return 0;
                }
            };
        {/gt}
    {/.discriminantCount}

    var defaults = parentScope.prototype._pointerDefaults;

    {#.fields}
        /* {.name} */

        {@ne key=.discriminantValue value=65535}
            {! Union member !}

            parentScope.prototype.{@fieldIser name=.name/} = function () {
                return this.which() === {.discriminantValue};
            };

            parentScope.{@constant name=.name/} =
                parentScope.prototype.{@constant name=.name/} =
                {.discriminantValue};
        {/ne}

        {?.meta}
            {@eq key=.meta value="enum"}
                {>"readers/dataField"
                    current="parentScope"
                    default=.defaultValue
                    decoder="reader.fields"
                    method="uint16"
                    byteCount="2"/}
            {:else}
                {@eq key=.meta value="parameter"}
                    var f{$idx} = parentScope
                        {@repeat times=.type.scopeDistance}._PARENT{/repeat}
                        ._PARAMS[{.type.position}]
                        ._FIELD;
                {/eq}

                {@eq key=.meta value="struct"}
                    var f{$idx} = {>"generic/scope" source="reader" index="types" current="parentScope"/}._FIELD;
                {/eq}

                {@eq key=.meta value="list"}
                    var f{$idx} = {>"readers/list" index="types" current="parentScope"/}._FIELD;
                {/eq}

                {@eq key=.discriminantValue value=65535}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.get(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.has({@math key=.offset method="multiply" operand="8"/});

                {:else}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.unionGet(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.unionHas(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/eq}
        {:else}
            {@eq key=.type value="group"}
                var G{$idx} = reader.group(parentScope);
                parentScope.{@capitalize name=.name/} = G{$idx};
                G{$idx}.prototype._pointerDefaults = defaults;

                {>"readers/fields"/}(types, G{$idx}, allocator);

                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return new G{$idx}(this);
                };
            {/eq}

            {@eq key=.type value="AnyPointer"}
                var f{$idx} = reader.AnyPointer._FIELD;

                {@eq key=.discriminantValue value=65535}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.get(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.has({@math key=.offset method="multiply" operand="8"/});
                {:else}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.unionGet(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.unionHas(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/eq}

            {@member key=.type value="Text,Data"}
                var f{$idx} = reader.{.type}._FIELD;
                
                {@eq key=discriminantValue value=65535}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.get(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.has({@math key=.offset method="multiply" operand="8"/});
                {:else}
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        f{$idx}.unionGet(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        f{$idx}.unionHas(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/member}

            {@eq key=.type value="Void"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return null;
                };
            {/eq}

            {@eq key=.type value="Bool"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._dataSection + {@boolOffset offset=.offset/};

                    if (position < this._pointersSection) {
                        return reader.fields.bool(
                            {.defaultValue},
                            this._segment,
                            position,
                            {@boolMask offset=.offset/}
                        );
                    } else {
                        return !!{.defaultValue};
                    }
                };
            {/eq}

            {#. current="parentScope" decoder="reader.fields"}
                {@eq key=.type value="Int8"}{>"readers/dataField"  default=.defaultValue method="int8"  byteCount="1"/}{/eq}
                {@eq key=.type value="Int16"}{>"readers/dataField" default=.defaultValue method="int16" byteCount="2"/}{/eq}
                {@eq key=.type value="Int32"}{>"readers/dataField" default=.defaultValue method="int32" byteCount="4"/}{/eq}
                {@eq key=.type value="Int64"}{>"readers/dataField" default=.defaultValue method="int64" byteCount="8"/}{/eq}
                {@eq key=.type value="UInt8"}{>"readers/dataField"  default=.defaultValue method="uint8"  byteCount="1"/}{/eq}
                {@eq key=.type value="UInt16"}{>"readers/dataField" default=.defaultValue method="uint16" byteCount="2"/}{/eq}
                {@eq key=.type value="UInt32"}{>"readers/dataField" default=.defaultValue method="uint32" byteCount="4"/}{/eq}
                {@eq key=.type value="UInt64"}{>"readers/dataField" default=.defaultValue method="uint64" byteCount="8"/}{/eq}
                {@eq key=.type value="Float32"}{>"readers/floatField" method="float32" byteCount="4"/}{/eq}
                {@eq key=.type value="Float64"}{>"readers/floatField" method="float64" byteCount="8"/}{/eq}
            {/.}
        {/.meta}
    {/.fields}

    {?.fields}
        {@provide}
            {#.pointers}
                defaults[{.offset}] = (function () {
                    {?.meta}
                        {@eq key=.meta value="struct"}
                            var Reader = {>"generic/scope" source="reader" index="types" current="parentScope"/};
                            var arena = allocator._fromBase64("{.defaultValue}").asReader();
                        {/eq}

                        {@eq key=.meta value="list"}
                            var Reader = {>"readers/list" index="types" current="parentScope"/};
                            var arena = {>"readers/listDefaultArena"/};
                        {/eq}

                        {@eq key=.meta value="parameter"}
                            var Reader = parentScope
                                {@repeat times=.type.scopeDistance}._PARENT{/repeat}
                                ._PARAMS[{.type.position}];

                            {@eq key=.defaultValue value="AAAAAAAAAAA="}
                                var arena;
                                if (Reader._CT && Reader._CT.meta === 1) {
                                    arena = allocator._fromBase64(Reader._B64_NULL).asReader();
                                } else {
                                    {!
                                     ! Handle null AnyPointer-typed instances in
                                     ! addition to structs.
                                     !}
                                    arena = allocator._fromBase64("{.defaultValue}").asReader();
                                }
                            {:else}
                                var arena = allocator._fromBase64("{.defaultValue}").asReader();
                            {/eq}
                        {/eq}
                    {:else}
                        {@eq key=.type value="AnyPointer"}
                            var Reader = reader.AnyPointer;
                            var arena = allocator._fromBase64("{.defaultValue}").asReader();
                        {/eq}

                        {@eq key=.type value="Text"}
                            var Reader = reader.Text;
                            {@eq key=.defaultValue value="AAAAAAAAAAA="}
                                var arena = allocator._fromBase64("AQAAAAoAAAAAAAAAAAAAAA==").asReader();
                            {:else}
                                var arena = allocator._fromBase64("{.defaultValue}").asReader();
                            {/eq}
                        {/eq}

                        {@eq key=.type value="Data"}
                            var Reader = reader.Data;
                            {@eq key=.defaultValue value="AAAAAAAAAAA="}
                                var arena = allocator._fromBase64("AQAAAAIAAAA=").asReader();
                            {:else}
                                var arena = allocator._fromBase64("{.defaultValue}").asReader();
                            {/eq}
                        {/eq}
                    {/.meta}
                    return Reader._deref(arena, arena._root(), 0);
                })();
            {/.pointers}
        {:pointers}
            {@pointerFields fields=.fields/}
        {/provide}

        parentScope.prototype._floatDefaults = {
            {@provide}
                {#.floats}
                    {.name} :
                        {@eq key=.type value="Float32"}
                            allocator._fromBase64("{.defaultBytes}").getSegment(0)
                        {/eq}
                        {@eq key=.type value="Float64"}
                            allocator._fromBase64("{.defaultBytes}").getSegment(0)
                        {/eq}
                    {@sep},{/sep}
                {/.floats}
            {:floats}
                {@floatFields fields=.fields/}
            {/provide}
        };
    {/.fields}
})
