(function (types, parentScope) {
    {!
     ! Policy of upgrading on dereference implies that the parent structure
     ! has data underlying all of the compile-time positions, so there's no
     ! need to check bounds on any positions.
     !}

    {?.discriminantCount}
        {@gt key=.discriminantCount value=0}
            parentScope.prototype.which = function () {
                return reader.primitives.uint16(
                    this._segment,
                    this._dataSection +
                        {@math key=.discriminantOffset method="multiply" operand="2"/}
                );
            };

            parentScope.prototype._setWhich = function (discr) {
                {>"builders/zeroUnion" zero="builder.zero"/}

                var position = this._dataSection +
                    {@math key=.discriminantOffset method="multiply" operand="2"/};

                builder.primitives.uint16(discr, this._segment, position);
            };
        {/gt}
    {/.discriminantCount}

    {#.fields}
        {@ne key=.discriminantValue value=65535}
            {! Union member !}

            parentScope.prototype.{@fieldIser name=.name/} = function () {
                return this.which() === {.discriminantValue};
            };

            parentScope.{@constant name=.name/} =
                parentScope.prototype.{@constant name=.name/} =
                {.discriminantValue};
        {/ne}

        {?.meta}
            {@eq key=.meta value="enum"}
                {>"builders/dataField"
                    current="parentScope"
                    default=.defaultValue
                    decoder="reader.fields"
                    encoder="builder.fields"
                    method="uint16"
                    byteCount="2"/}
            {:else}
                {@eq key=.meta value="parameter"}
                    var Builder_{.name} = parentScope
                        {@repeat times=.type.scopeDistance}._PARENT{/repeat}
                        ._PARAMS[{.type.position}];
                {/eq}

                {@eq key=.meta value="struct"}
                    var Builder_{.name} = {>"generic/scope" source="builder" index="types" current="parentScope"/};
                {/eq}

                {@eq key=.meta value="list"}
                    var Builder_{.name} = {>"builders/list" index="types" current="parentScope"/};
                {/eq}

                {@eq key=.discriminantValue value=65535}
                    parentScope.prototype.{@fieldAdopter name=.name/} =
                        Builder_{.name}._adoptField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._getField(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._hasField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldIniter name=.name/} =
                        Builder_{.name}._initField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldDisowner name=.name/} =
                        Builder_{.name}._disownField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldReaderDisowner name=.name/} =
                        Builder_{.name}._readerDisownField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._setField({@math key=.offset method="multiply" operand="8"/});
                {:else}
                    parentScope.prototype.{@fieldAdopter name=.name/} =
                        Builder_{.name}._unionAdoptField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._unionGetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._unionHasField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldIniter name=.name/} =
                        Builder_{.name}._unionInitField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldDisowner name=.name/} =
                        Builder_{.name}._unionDisownField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldReaderDisowner name=.name/} =
                        Builder_{.name}._unionReaderDisownField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._unionSetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/eq}
        {:else}
            {@eq key=.type value="group"}
                var Group_{.name} = builder.group(parentScope._READER._Group_{.name});
                {>"builders/fields"/}(
                    types,
                    Group_{.name}
                );

                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {!
                     ! On getting the parent structure, the underlying fields
                     ! were already upgraded to the current version if needed,
                     ! so the data underlying the group is up-to-date (or
                     ! better).
                     !}

                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return new Group_{.name}(this);
                };

                parentScope.prototype.{@fieldIniter name=.name/} = function () {
                    {>"builders/setDiscriminant"/}

                    return new Group_{.name}(this);
                };
            {/eq}

            {@eq key=.type value="AnyPointer"}
                {@eq key=.discriminantValue value=65535}
                    var Builder_{.name} = builder.any.Nonunion;

                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._getField(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._hasField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._setField({@math key=.offset method="multiply" operand="8"/});
                {:else}
                    var Builder_{.name} = builder.any.Union;

                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._unionGetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._unionHasField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldIniter name=.name/} =
                        Builder_{.name}._unionInitField({.discriminantValue});
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._unionSetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/eq}

            {@member key=.type value="Text,Data"}
                var Builder_{.name} = builder.{.type};

                {@eq key=.discriminantValue value=65535}
                    parentScope.prototype.{@fieldAdopter name=.name/} =
                        Builder_{.name}._adoptField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._getField(
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._hasField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldIniter name=.name/} =
                        Builder_{.name}._initField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldDisowner name=.name/} =
                        Builder_{.name}._disownField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldReaderDisowner name=.name/} =
                        Builder_{.name}._readerDisownField({@math key=.offset method="multiply" operand="8"/});
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._setField({@math key=.offset method="multiply" operand="8"/});
                {:else}
                    parentScope.prototype.{@fieldAdopter name=.name/} =
                        Builder_{.name}._unionAdoptField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldGetter name=.name/} =
                        Builder_{.name}._unionGetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/},
                            {.offset}
                        );
                    parentScope.prototype.{@fieldHaser name=.name/} =
                        Builder_{.name}._unionHasField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldIniter name=.name/} =
                        Builder_{.name}._unionInitField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldDisowner name=.name/} =
                        Builder_{.name}._unionDisownField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldReaderDisowner name=.name/} =
                        Builder_{.name}._unionReaderDisownField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                    parentScope.prototype.{@fieldSetter name=.name/} =
                        Builder_{.name}._unionSetField(
                            {.discriminantValue},
                            {@math key=.offset method="multiply" operand="8"/}
                        );
                {/eq}
            {/member}

            {@eq key=.type value="Void"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return null;
                };

                parentScope.prototype.{@fieldSetter name=.name/} = function () {
                    {>"builders/setDiscriminant"/}
                };
            {/eq}

            {@eq key=.type value="Bool"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return reader.fields.bool(
                        {.defaultValue},
                        this._segment,
                        this._dataSection + {@boolOffset offset=.offset/},
                        {@boolMask offset=.offset/}
                    );
                };

                parentScope.prototype.{@fieldSetter name=.name/} = function (value) {
                    {>"builders/setDiscriminant"/}

                    builder.fields.bool(
                        value,
                        {.defaultValue},
                        this._segment,
                        this._dataSection + {@boolOffset offset=.offset/},
                        {@boolMask offset=.offset/}
                    );
                };
            {/eq}

            {#. current="parentScope" decoder="reader.fields" encoder="builder.fields"}
                {@eq key=.type value="Int8"}{>"builders/dataField"  default=.defaultValue method="int8"  byteCount="1"/}{/eq}
                {@eq key=.type value="Int16"}{>"builders/dataField" default=.defaultValue method="int16" byteCount="2"/}{/eq}
                {@eq key=.type value="Int32"}{>"builders/dataField" default=.defaultValue method="int32" byteCount="4"/}{/eq}
                {@eq key=.type value="Int64"}{>"builders/dataField" default=.defaultValue method="int64" byteCount="8"/}{/eq}
                {@eq key=.type value="UInt8"}{>"builders/dataField"  default=.defaultValue method="uint8"  byteCount="1"/}{/eq}
                {@eq key=.type value="UInt16"}{>"builders/dataField" default=.defaultValue method="uint16" byteCount="2"/}{/eq}
                {@eq key=.type value="UInt32"}{>"builders/dataField" default=.defaultValue method="uint32" byteCount="4"/}{/eq}
                {@eq key=.type value="UInt64"}{>"builders/dataField" default=.defaultValue method="uint64" byteCount="8"/}{/eq}
                {@eq key=.type value="Float32"}{>"builders/floatField" method="float32" byteCount="4"/}{/eq}
                {@eq key=.type value="Float64"}{>"builders/floatField" method="float64" byteCount="8"/}{/eq}
            {/.}
        {/.meta}
    {/.fields}

    parentScope.prototype._pointerDefaults = parentScope._READER.prototype._pointerDefaults;
    parentScope.prototype._floatDefaults = parentScope._READER.prototype._floatDefaults;
})
