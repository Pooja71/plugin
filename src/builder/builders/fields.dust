(function (types, parentScope) {
    {!
     ! Policy of upgrading on dereference implies that the parent structure
     ! has data underlying all of the compile-time positions, so there's no
     ! need to check bounds on any positions.
     !}

    {?.discriminantCount}
        {@gt key=.discriminantCount value=0}
            parentScope.prototype.which = function () {
                return reader.primitives.uint16(
                    this._segment,
                    this._dataSection +
                        {@math key=.discriminantOffset method="multiply" operand="2"/}
                );
            };

            parentScope.prototype._setWhich = function (discriminant) {
                {>"builders/zeroUnion" zero="builder.zero"/}

                var position = this._dataSection +
                    {@math key=.discriminantOffset method="multiply" operand="2"/};

                builder.primitives.uint16(discriminant, this._segment, position);
            };
        {/gt}
    {/.discriminantCount}

    {#.fields}
        {@ne key=.discriminantValue value=65535}
            {! Anonymous union member !}
            parentScope.prototype.{@fieldIser name=.name/} = function () {
                return this.which() === {.discriminantValue};
            };

            parentScope.{@constant name=.name/} =
                parentScope.prototype.{@constant name=.name/} =
                {.discriminantValue};
        {/ne}

        {?.meta}
            {@eq key=.meta value="enum"}
                {>"builders/dataField"
                    current="parentScope"
                    default=.defaultValue
                    decoder="reader.fields"
                    encoder="builder.fields"
                    method="uint16"
                    byteCount="2"/}
            {:else}
                {@eq key=.meta value="struct"}
                    var Builder_{.name} = {>"generic/scope" source="builder" index="types" current="parentScope"/};

                    parentScope.prototype.{@fieldIniter name=.name/} = function () {
                        {>"builders/setDiscriminant"/}

                        var pointer = {
                            segment : this._segment,
                            position : this._pointersSection +
                                {@math key=.offset method="multiply" operand="8"/}
                        };

                        return Builder_{.name}._init(
                            this._arena,
                            pointer,
                            this._depth + 1
                        );
                    };
                {/eq}
                {@eq key=.meta value="list"}
                    var Builder_{.name} = {>"builders/list" index="types" current="parentScope"/};

                    parentScope.prototype.{@fieldIniter name=.name/} = function (n) {
                        {>"builders/setDiscriminant"/}

                        var pointer = {
                            segment : this._segment,
                            position : this._pointersSection +
                                {@math key=.offset method="multiply" operand="8"/}
                        };

                        return Builder_{.name}._init(this._arena, pointer, n);
                    };
                {/eq}

                {@provide}
                    parentScope.prototype.{@fieldGetter name=.name/} = function () {
                        {>throwOnInactive error="Attempted to access an inactive union member"/}

                        var pointer = {
                            segment : this._segment,
                            position : this._pointersSection +
                                {@math key=.offset method="multiply" operand="8"/}
                        };

                        if (reader.isNull(pointer)) {
                            builder.copy.pointer.{.setter}(
                                this._defaults.{.name}._arena,
                                this._defaults.{.name}._layout(),
                                this._arena,
                                pointer
                            );
                        }

                        return Builder_{.name}._deref(this._arena, pointer);
                    };
                {:setter}
                    {@verbatim}
                        {@eq key=.meta value="struct"}setStructPointer{/eq}
                        {@eq key=.meta value="list"}setListPointer{/eq}
                    {/verbatim}
                {/provide}

                parentScope.prototype.{@fieldSetter name=.name/} = function (value) {
                    if (Builder_{.name}._TYPE !== value._TYPE)
                        throw new TypeError();

                    {>"builders/setDiscriminant"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    Builder_{.name}._set(this._arena, pointer, value);
                };

                parentScope.prototype.{@fieldAdopter name=.name/} = function (value) {
                    if (Builder_{.name}._TYPE !== value._TYPE)
                        throw new TypeError();

                    if (!value._isOrphan)
                        throw new ValueError('Cannot adopt non-orphans');

                    {>"builders/setDiscriminant"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    Builder_{.name}._adopt(this._arena, pointer, value);
                };

                parentScope.prototype.{@fieldDisowner name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    if (reader.isNull(pointer)) {
                        return Builder_{.name}._initOrphan(this._arena);
                    } else {
                        var instance = Builder_{.name}._deref(
                            this._arena,
                            pointer
                        );
                        this._arena._zero(pointer, 8);
                        instance._isOrphan = true;

                        return instance;
                    }
                };

                parentScope.prototype.{@fieldReaderDisowner name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    var instance = Builder_{.name}._READER._deref(
                        this._arena,
                        pointer
                    );

                    this._arena._zero(pointer, 8);
                    instance._isOrphan = true;

                    return instance;
                };

                parentScope.prototype.{@fieldHaser name=.name/} = function () {
                    {!
                     ! For union members, field inactivity disqualifies it from
                     ! is-set status.
                     !}
                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    return (
                        {@ne key=.discriminantValue value=65535}
                            this.{@fieldIser name=.name/}()
                            &&
                        {/ne}
                        !reader.isNull(pointer)
                    );
                };
            {/eq}
        {:else}
            {@eq key=.type value="group"}
                var Group_{.name} = builder.group(parentScope._READER._Group_{.name});
                {>"builders/fields"/}(
                    types,
                    Group_{.name}
                );

                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {!
                     ! On getting the parent structure, the underlying fields
                     ! were already upgraded to the current version if needed,
                     ! so the data underlying the group is up-to-date (or
                     ! better).
                     !}

                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return new Group_{.name}(this);
                };

                parentScope.prototype.{@fieldIniter name=.name/} = function () {
                    {>"builders/setDiscriminant"/}

                    return new Group_{.name}(this);
                };
            {/eq}
            {@eq key=.type value="Data"}{>"builders/listField" current="parentScope"/}{/eq}
            {@eq key=.type value="Text"}{>"builders/listField" current="parentScope"/}{/eq}
            {@eq key=.type value="AnyPointer"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    return builder.AnyPointer._deref(this._arena, pointer);
                };

                parentScope.prototype.{@fieldSetter name=.name/} = function (value) {
                    {>"builders/setDiscriminant"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    builder.AnyPointer._set(this._arena, pointer, value);
                };

                parentScope.prototype.{@fieldAdopter name=.name/} = function (value) {
                    if (builder.AnyPointerBlob._TYPE !== value._TYPE) {
                        throw new TypeError();
                    }

                    if (!value._isDisowned) {
                        throw new ValueError('Attempted to adopt an AnyPointerBlob a second time');
                    }

                    {>"builders/setDiscriminant"/}

                    builder.AnyPointerBlob._adopt(
                        this._arena,
                        {
                            segment : this._segment,
                            position : this._pointersSection +
                                {@math key=.offset method="multiply" operand="8"/}
                        },
                        value
                    );
                };

                parentScope.prototype.{@fieldDisowner name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var pointer = {
                        segment : this._segment,
                        position : this._pointersSection +
                            {@math key=.offset method="multiply" operand="8"/}
                    };

                    var instance = new builder.AnyPointerBlob(this._arena, pointer);
                    this._arena._zero(pointer, 8);

                    return instance;
                };
            {/eq}

            {@eq key=.type value="Void"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    return null;
                };

                parentScope.prototype.{@fieldSetter name=.name/} = function () {
                    {>"builders/setDiscriminant"/}
                };
            {/eq}

            {@eq key=.type value="Bool"}
                parentScope.prototype.{@fieldGetter name=.name/} = function () {
                    {>throwOnInactive error="Attempted to access an inactive union member"/}

                    var position = this._dataSection + {@boolOffset offset=.offset/};

                    return reader.fields.bool(
                        {.defaultValue},
                        this._segment,
                        position,
                        {@boolMask offset=.offset/}
                    );
                };

                parentScope.prototype.{@fieldSetter name=.name/} = function (value) {
                    {>"builders/setDiscriminant"/}

                    var position = this._dataSection + {@boolOffset offset=.offset/};

                    builder.fields.bool(
                        value,
                        {.defaultValue},
                        this._segment,
                        position,
                        {@boolMask offset=.offset/}
                    );
                };
            {/eq}

            {#. decoder="reader.fields" encoder="builder.fields"}
                {@eq key=.type value="Int8"}{>"builders/dataField"  current="parentScope" default=.defaultValue method="int8"  byteCount="1"/}{/eq}
                {@eq key=.type value="Int16"}{>"builders/dataField" current="parentScope" default=.defaultValue method="int16" byteCount="2"/}{/eq}
                {@eq key=.type value="Int32"}{>"builders/dataField" current="parentScope" default=.defaultValue method="int32" byteCount="4"/}{/eq}
                {@eq key=.type value="Int64"}{>"builders/dataField" current="parentScope" default=.defaultValue method="int64" byteCount="8"/}{/eq}
                {@eq key=.type value="UInt8"}{>"builders/dataField"  current="parentScope" default=.defaultValue method="uint8"  byteCount="1"/}{/eq}
                {@eq key=.type value="UInt16"}{>"builders/dataField" current="parentScope" default=.defaultValue method="uint16" byteCount="2"/}{/eq}
                {@eq key=.type value="UInt32"}{>"builders/dataField" current="parentScope" default=.defaultValue method="uint32" byteCount="4"/}{/eq}
                {@eq key=.type value="UInt64"}{>"builders/dataField" current="parentScope" default=.defaultValue method="uint64" byteCount="8"/}{/eq}
                {@eq key=.type value="Float32"}{>"builders/floatField" current="parentScope" method="float32" byteCount="4"/}{/eq}
                {@eq key=.type value="Float64"}{>"builders/floatField" current="parentScope" method="float64" byteCount="8"/}{/eq}
            {/.}
        {/.meta}
    {/.fields}

    parentScope.prototype._defaults = parentScope._READER.prototype._defaults;
})
