{current}.prototype.{@fieldGetter name=.name/} = function () {
    {>throwOnInactive error="Attempted to access an inactive union member"/}

    var pointer = {
        segment : this._segment,
        position : this._pointersSection +
            {@math key=.offset method="multiply" operand="8"/}
    };

    if (reader.isNull(pointer)) {
        builder.copy.pointer.setListPointer(
            this._defaults.{.name}._arena,
            this._defaults.{.name}._layout(),
            this._arena,
            pointer
        );
    }

    return builder.{.type}._deref(
        this._arena,
        pointer
    );
};

{current}.prototype.{@fieldSetter name=.name/} = function (value) {
    var params = builder.{.type}._setParams(value);

    {>"builders/setDiscriminant"/}

    var pointer = {
        segment : this._segment,
        position : this._pointersSection +
            {@math key=.offset method="multiply" operand="8"/}
    };

    builder.{.type}._set(this._arena, pointer, params);
};

{current}.prototype.{@fieldIniter name=.name/} = function (n) {
    {>"builders/setDiscriminant"/}

    var pointer = {
        segment : this._segment,
        position : this._pointersSection +
            {@math key=.offset method="multiply" operand="8"/}
    };

    return builder.{.type}._init(
        this._arena,
        pointer,
        {@eq key=.type value="Text"}
            n + 1
        {:else}
            n
        {/eq}
    );
};

{current}.prototype.{@fieldHaser name=.name/} = function () {
    var pointer = {
        segment : this._segment,
        position : this._pointersSection +
            {@math key=.offset method="multiply" operand="8"/}
    };

    return (
        {@ne key=.discriminantValue value=65535}
            this.{@fieldIser name=.name/}()
            &&
        {/ne}
        !reader.isNull(pointer)
    );
};

{current}.prototype.{@fieldAdopter name=.name/} = function (value) {
    if (builder.{.type}._TYPE !== value._TYPE) {
        throw new TypeError();
    }

    {>"builders/setDiscriminant"/}

    builder.{.type}._adopt(
        this._arena,
        {
            segment : this._segment,
            position : this._pointersSection +
                {@math key=.offset method="multiply" operand="8" /}
        },
        value
    );
};

{current}.prototype.{@fieldDisowner name=.name/} = function () {
    var pointer = {
        segment : this._segment,
        position : this._pointersSection +
            {@math key=.offset method="multiply" operand="8"/}
    };

    if (reader.isNull(pointer)) {
        return builder.{.type}._initOrphan(this._arena);
    } else {
        var instance = builder.{.type}._deref(
            this._arena,
            pointer
        );
        this._arena._zero(pointer, 8);
        instance._isDisowned = true;

        return instance;
    }
};
