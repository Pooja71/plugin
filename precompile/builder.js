var dust = require("dustjs-linkedin/lib/server");(function(){dust.register("intersegment/directPointer",body_0);function body_0(chk,ctx){return chk.reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("] = (2 >>> 0) + (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x000000f8);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+1] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+2] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x00ff0000) >>> 16;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+3] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0xff000000) >>> 24;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+4] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x000000ff) >>> 0;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+5] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+6] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x00ff0000) >>> 16;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+7] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0xff000000) >>> 24;");}return body_0;})();
(function(){dust.register("intersegment/hopPointer",body_0);function body_0(chk,ctx){return chk.reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("] = (6 >>> 0) + (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x000000f8);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+1] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+2] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x00ff0000) >>> 16;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+3] =           (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0xff000000) >>> 24;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+4] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x000000ff) >>> 0;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+5] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+6] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0x00ff0000) >>> 16;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+7] = (").reference(ctx.get(["sid"], false),ctx,"h").write(" & 0xff000000) >>> 24;");}return body_0;})();
(function(){dust.register("list/compositePointer",body_0);function body_0(chk,ctx){return chk.reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("] = (1 >>> 0) + ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x000001f8) >>> 1);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+1] =            (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x0001fe00) >>> 9;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+2] =            (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x01fe0000) >>> 17;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+3] =           ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0xfe000000) >>> 25) + ((").reference(ctx.get(["sign"], false),ctx,"h").write(" >>> 0) << 7);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+4] = (").reference(ctx.getPath(false, ["type","preferredListEncoding"]),ctx,"h").write(" >>> 0) + (").reference(ctx.get(["bytes"], false),ctx,"h").write(" & 0x000000f8);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+5] =                                        (").reference(ctx.get(["bytes"], false),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+6] =                                        (").reference(ctx.get(["bytes"], false),ctx,"h").write(" & 0x00ff0000) >>> 16;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+7] =                                        (").reference(ctx.get(["bytes"], false),ctx,"h").write(" & 0xff000000) >>> 24;");}return body_0;})();
(function(){dust.register("list/primitivePointer",body_0);function body_0(chk,ctx){return chk.reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("] = (1 >>> 0) + ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x000001f8) >>> 1);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+1] =            (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x0001fe00) >>> 9;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+2] =            (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x01fe0000) >>> 17;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+3] =           ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0xfe000000) >>> 25) + ((").reference(ctx.get(["sign"], false),ctx,"h").write(" >>> 0) << 7);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+4] = (").reference(ctx.getPath(false, ["type","listEncoding"]),ctx,"h").write(" >>> 0) + ((").reference(ctx.get(["cardinality"], false),ctx,"h").write(" & 0x0000001f) << 3);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+5] =                                (").reference(ctx.get(["cardinality"], false),ctx,"h").write(" & 0x00001fe0) >>> 5;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+6] =                                (").reference(ctx.get(["cardinality"], false),ctx,"h").write(" & 0x001fe000) >>> 13;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+7] =                                (").reference(ctx.get(["cardinality"], false),ctx,"h").write(" & 0x1fe00000) >>> 21;");}return body_0;})();
(function(){dust.register("struct/pointer",body_0);function body_0(chk,ctx){return chk.reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("] =   ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x000001f8) >>> 1);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+1] =  (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x0001fe00) >>> 9;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+2] =  (").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0x01fe0000) >>> 17;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+3] = ((").reference(ctx.get(["offset"], false),ctx,"h").write(" & 0xfe000000) >>> 25) + ((").reference(ctx.get(["sign"], false),ctx,"h").write(" >>> 0) << 7);").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+4] = (").reference(ctx.getPath(false, ["type","dataWordCount"]),ctx,"h").write(" & 0x000000ff) >>> 0;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+5] = (").reference(ctx.getPath(false, ["type","dataWordCount"]),ctx,"h").write(" & 0x0000ff00) >>> 8;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+6] = (").reference(ctx.getPath(false, ["type","pointerCount"]),ctx,"h").write(" & 0x000000ff) >>> 0;").reference(ctx.get(["bytesV"], false),ctx,"h").write("[").reference(ctx.get(["baseIndex"], false),ctx,"h").write("+7] = (").reference(ctx.getPath(false, ["type","pointerCount"]),ctx,"h").write(" & 0x0000ff00) >>> 8;");}return body_0;})();
(function(){dust.register("offset/distance",body_0);function body_0(chk,ctx){return chk.write("(lhs.byteOffset < rhs.byteOffset ? rhs.byteOffset - lhs.byteOffset : lhs.byteOffset - rhs.byteOffset)");}return body_0;})();
(function(){dust.register("offset/isFar",body_0);function body_0(chk,ctx){return chk.write("(b1.buffer == b2.buffer)");}return body_0;})();
(function(){dust.register("offset/isNegative",body_0);function body_0(chk,ctx){return chk.write("(lhs.byteOffset < rhs.byteOffset)");}return body_0;})();