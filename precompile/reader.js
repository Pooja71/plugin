var dust = require("dustjs-linkedin/lib/server");(function(){dust.register("list/altBytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["p"], false),ctx,"h").write("[4] & 0x00000007) + (").reference(ctx.get(["p"], false),ctx,"h").write("[5] << 8) + (").reference(ctx.get(["p"], false),ctx,"h").write("[6] << 16) + (").reference(ctx.get(["p"], false),ctx,"h").write("[7] << 24))");}return body_0;})();
(function(){dust.register("list/bytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["p"], false),ctx,"h").write("[4] & 0xffffff8) + (").reference(ctx.get(["p"], false),ctx,"h").write("[5] << 8) + (").reference(ctx.get(["p"], false),ctx,"h").write("[6] << 16) + (").reference(ctx.get(["p"], false),ctx,"h").write("[7] << 24))");}return body_0;})();
(function(){dust.register("list/cardinality",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["p"], false),ctx,"h").write("[4] >>> 3) + (").reference(ctx.get(["p"], false),ctx,"h").write("[5] << 5) + (").reference(ctx.get(["p"], false),ctx,"h").write("[6] << 13) + (").reference(ctx.get(["p"], false),ctx,"h").write("[7] << 21))");}return body_0;})();
(function(){dust.register("list/offsetBytes",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["p"], false),ctx,"h").write("[0] & 0xfffffffc) << 1) + (").reference(ctx.get(["p"], false),ctx,"h").write("[1] << 9) + (").reference(ctx.get(["p"], false),ctx,"h").write("[2] << 17) + (").reference(ctx.get(["p"], false),ctx,"h").write("[3] << 25))");}return body_0;})();
(function(){dust.register("list/offsetBytesIsNegative",body_0);function body_0(chk,ctx){return chk.write("(").reference(ctx.get(["p"], false),ctx,"h").write("[3] & 0x00000008)");}return body_0;})();
(function(){dust.register("list/reader",body_0);function body_0(chk,ctx){return chk.write("exports.ListReader = function () {};/*** @param ").reference(ctx.get(["Uint32"], false),ctx,"h").write(" datum - Byte immediately following the list pointer of interest.*/exports.CompositeList = function CompositeList(Reader, segments, segment, datum) {var pointer = segment.subarray(datum-8);datum = ").partial("list/offsetBytesIsNegative",ctx,{"p":"pointer"}).write(" ?datum - ").partial("list/offsetBytes",ctx,{"p":"pointer"}).write(" :datum + ").partial("list/offsetBytes",ctx,{"p":"pointer"}).write(";var elementSize = require('list/elementSize');if (").partial("list/sizeEnum",ctx,{"p":"pointer"}).write(" === elementSize.INLINE_COMPOSITE) {var sPointer = segment.subarray(datum-8);this.length = ").partial("struct/altCardinality",ctx,null).write(";} else {var sPointer = undefined;var elementSize = elementSize(").partial("list/sizeEnum",ctx,{"p":"pointer"}).write(");this.length = ").partial("list/cardinality",ctx,{"p":"pointer"}).write(";}this.get = function (index) {return new Reader.createMember(segments,segment,datum,index,sPointer);};};CompositeList.prototype = new ListReader();exports.PrimitiveList = function PrimitiveList(decodeFn, bytes, begin, length) {this.length = length;this.get = function (index) {return decodeFn(bytes, begin, index);};};PrimitiveList.prototype = new ListReader();exports.Text = function Text() {};Text.prototype = new ListReader();exports.Data = function Data() {};Data.prototype = new ListReader();exports.AnyList = function AnyList(composite, primitive) {this.composite = composite;this.primitive = primitive; // Local to segment};AnyList.prototype.interpret = function AnyList(interpreter) {if (interpreter instanceof StructReader) {var c = this.composite;return new CompositeList(interpreter, c.segments, c.segment, c.datum);} else if (interpreter instanceof ListReader) {// AnyStruct bootstrap to simplify CompositeList?var a;}var p = this.primitive;return new PrimitiveList(interpreter, p.bytes, p.begin, p.length);}};AnyList.prototype = new ListReader();");}return body_0;})();
(function(){dust.register("list/sizeEnum",body_0);function body_0(chk,ctx){return chk.write("(").reference(ctx.get(["p"], false),ctx,"h").write("[4] & 0x00000007)");}return body_0;})();
(function(){dust.register("primitive/Bool",body_0);function body_0(chk,ctx){return chk.write("(!!((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] & ").helper("boolMask",ctx,{},{"bitDistance":ctx.get(["offset"], false)}).write("))");}return body_0;})();
(function(){dust.register("primitive/Int16",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"skip":1}).write("] << 8))");}return body_0;})();
(function(){dust.register("primitive/Int32",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24))");}return body_0;})();
(function(){dust.register("primitive/Int64",body_0);function body_0(chk,ctx){return chk.write("[((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":4}).write("] | 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":5}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":6}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":7}).write("] << 24),((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24)]");}return body_0;})();
(function(){dust.register("primitive/Int8",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] | 0)");}return body_0;})();
(function(){dust.register("primitive/UInt16",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8))");}return body_0;})();
(function(){dust.register("primitive/UInt32",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24))");}return body_0;})();
(function(){dust.register("primitive/UInt64",body_0);function body_0(chk,ctx){return chk.write("[((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":4}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":5}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":6}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":7}).write("] << 24),((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":1}).write("] << 8)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":2}).write("] << 16)+ ((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false),"skip":3}).write("] << 24)]");}return body_0;})();
(function(){dust.register("primitive/UInt8",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write(")[").reference(ctx.get(["begin"], false),ctx,"h").write(" + ").helper("byteOffset",ctx,{},{"type":ctx.get(["type"], false),"offset":ctx.get(["offset"], false)}).write("] >>> 0)");}return body_0;})();
(function(){dust.register("primitive/Void",body_0);function body_0(chk,ctx){return chk.write("null");}return body_0;})();
(function(){dust.register("struct/altCardinality",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 0] >>> 2) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 1] <<  6) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 2] << 14) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 3] << 22))");}return body_0;})();
(function(){dust.register("struct/begin",body_0);function body_0(chk,ctx){return chk.partial("struct/offsetBytesIsNegative",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)}).write(" ?").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 8 - ").partial("struct/offsetBytes",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)}).write(" : ").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 8 + ").partial("struct/offsetBytes",ctx,{"segment":ctx.get(["segment"], false),"pointer":ctx.get(["pointer"], false)});}return body_0;})();
(function(){dust.register("struct/builder",body_0);function body_0(chk,ctx){return chk.write("var allocators = require('allocators');exports.List = function List(allocator, parentSegment, bytes) {this.segment = allocator.allocate(bytes);};").section(ctx.get(["structs"], false),ctx,{"block":body_1},null);}function body_1(chk,ctx){return chk.write("/*** @param ").reference(ctx.get(["Allocator"], false),ctx,"h").write(" allocator - Memory manager.* @param ").reference(ctx.get(["Uint8Array"], false),ctx,"h").write(" [parentSegment] - Segment of the ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder's* parent.*/// AnyPointer use case: build with parentSegment === undefined and set the// AnyPointer to the resultant.// One and only one allocator may own// slot.[struct display name for lookup purposes] function ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder(allocator, parentSegment) {// TODO: struct/bytes returns (dataWordCount + pointerCount) * 8this.segment = allocator.allocate(").helper("struct.bytes",ctx,{},{"struct":ctx.getPath(true, [])}).write(", parentSegment);// TODO: generalize struct/bytes to list/bytes, etc.// TODO: write zeros to data and pointer sections").section(ctx.getPath(false, ["field","slot"]),ctx,{"block":body_2},null).write("};").exists(ctx.get(["isRoot"], false),ctx,{"block":body_7},null);}function body_2(chk,ctx){return chk.exists(ctx.getPath(false, ["type","isPointer"]),ctx,{"else":body_3,"block":body_5},null);}function body_3(chk,ctx){return chk.exists(ctx.getPath(false, ["slot","defaultValue"]),ctx,{"block":body_4},null).write("Object.defineProperty(this, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () { return ").partial("struct/read",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write("; },set : function (value) { ").partial("struct/write",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write("; }});");}function body_4(chk,ctx){return chk.partial("struct/writeDefault",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment","datum":"8"}).write(";");}function body_5(chk,ctx){return chk.write("var rt = require('").reference(ctx.getPath(false, ["type","builder","runtimeSource"]),ctx,"h").write("');// TODO: struct/pointerDatum returns 8*dataWordCount + datumObject.defineProperty(this, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () {if (").partial("pointer/isNull",ctx,{"slot":ctx.get(["slot"], false),"segment":"this.segment"}).write(") {// Struct case, this allocates the stack space for another object// List case, this allocates the heap space//  primitives case: encode list cardinality and byte size (allocator needs to know how many bytes to allocate too)").exists(ctx.getPath(false, ["type","list"]),ctx,{"block":body_6},null).write("// List of what? Need to pass in constructors to parametrize the thing.// List stride?var child = rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocator, this.segment); // ok for builders, ng lists//List: rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocatorif (allocator.isFar(child.segment, this.segment)) {// Don't implement hops here.//   That arises under orphans I assume.// Don't implement AnyPointers here.//   Can't know what builder construct.//   User must create the builder externally and directly attach it.var id = allocator.id(child.segment);return ").partial("pointer/terminalFar",ctx,{"target":"child.segment","id":"id"}).write("; // byteOffset on target yields offset} else { //struct/terminalFar or list/terminalFar...?var allocator.difference(child.segment, this.segment)return ").partial("pointer/local",ctx,{"source":"this.segment","target":"child.segment"}).write(";}}},set : function (value) {}").helper("struct.pointerDatum",ctx,{},{"words":ctx.get(["dataWordCount"], false),"datum":"8"}).write(";return this._").reference(ctx.get(["name"], false),ctx,"h").write(";},set : function (value) {this._").reference(ctx.get(["name"], false),ctx,"h").write(" = {value;}");}function body_6(chk,ctx){return chk.write(" var child = rt.").reference(ctx.getPath(false, ["type","runtimeDS"]),ctx,"h").write("(allocator, this.segment, ").helper("listBytes",ctx,{},null).write("); ");}function body_7(chk,ctx){return chk.write("exports.").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder = ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder;").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder.psAllocation = function (pointerLength) {// @dataLengths populated by dataWordCount attribute of descendant structsvar allocator = new allocators.PointerSection(").helper("dataLengths",ctx,{},{"root":ctx.getPath(true, [])}).write(", pointerLength);return new ").reference(ctx.get(["displayName"], false),ctx,"h").write("Builder(allocator);};");}return body_0;})();
(function(){dust.register("struct/dataBytes",body_0);function body_0(chk,ctx){return chk.write("((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 4] <<  3) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 5] << 11))");}return body_0;})();
(function(){dust.register("struct/offsetBytes",body_0);function body_0(chk,ctx){return chk.write("((((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 0] & 0xfffffffc) >>> 0) <<  1) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 1]                      <<  9) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 2]                      << 17) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 3]                      << 25))");}return body_0;})();
(function(){dust.register("struct/offsetBytesIsNegative",body_0);function body_0(chk,ctx){return chk.write("(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 3] & 0x00000008)");}return body_0;})();
(function(){dust.register("struct/pointerBytes",body_0);function body_0(chk,ctx){return chk.write("(((").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 6] >>> 0) <<  3) +(").reference(ctx.get(["segment"], false),ctx,"h").write("[").reference(ctx.get(["pointer"], false),ctx,"h").write(" + 7]        << 11))");}return body_0;})();
(function(){dust.register("struct/reader",body_0);function body_0(chk,ctx){return chk.write("/* Base class for all `Struct` readers. */var Struct = require('capnp-js').Struct;/* Blob of module structs */var structs = {};/** Static methods resolve data and pointer sections from pointer input.* For a list with C=5, peek at the head of the field list to determine whether* `pointerSection` should be `begin` or `end`.*/").section(ctx.get(["structs"], false),ctx,{"block":body_1},null).section(ctx.get(["structs"], false),ctx,{"block":body_12},null);}function body_1(chk,ctx){return chk.write("/* Struct ").reference(ctx.get(["name"], false),ctx,"h").write(" */structs['").reference(ctx.get(["id"], false),ctx,"h").write("'] = function (segments, segment, dataSection, pointerSection, end) {this.id = '").reference(ctx.get(["id"], false),ctx,"h").write("';").section(ctx.get(["fields"], false),ctx,{"block":body_2},null).write("};/** Map a `Struct` pointer to a ").reference(ctx.get(["name"], false),ctx,"h").write(" reader.  For `AnyPointer` loci,* inspection of the pointer's A bits can dispatch here as needed.  Finally,* a `List` will have to invoke the constructor directly, since `Struct`* pointers in that case take on a different interpretation.* @param {Uint8Array[]} segments - All of the message segments.* @param ").reference(ctx.get(["Uint8Array"], false),ctx,"h").write(" segment - Segment of memory containing the pointer.* With type information available at compile time, this method can be* called blindly to generate a struct.* @param ").reference(ctx.get(["Uint32"], false),ctx,"h").write(" pointer - Byte offset into `segment` where the pointer* starts.*/structs['").reference(ctx.get(["id"], false),ctx,"h").write("'].deref = function (segments, segment, pointer) {var begin = ").partial("struct/begin",ctx,{"segment":"segment","pointer":"pointer"}).write(";var mid = begin + ").partial("struct/dataBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(";return new (structs['").reference(ctx.get(["id"], false),ctx,"h").write("'])(segments, segment, begin, mid,mid + ").partial("struct/pointerBytes",ctx,{"segment":"segment","pointer":"pointer"}).write(");};");}function body_2(chk,ctx){return chk.write("/** Default value handling requires encoded representation of the* default. Javascript bitwise operators convert to Int32, so the* XOR should be performed by primitives templates before operating.* This is blocked awaiting encoding facilities, e.g.* ```* var encode = require('encode/primitive');* var __default").reference(ctx.get(["name"], false),ctx,"h").write(" = encode.Uint8(").reference(ctx.get(["defaultValue"], false),ctx,"h").write(");* ...* return {>\"primitive/").reference(ctx.get(["type"], false),ctx,"h").write(".dust\" ... default=\"__default").reference(ctx.get(["name"], false),ctx,"h").write("\"/};* ```*/Object.defineProperty(this, '").reference(ctx.get(["name"], false),ctx,"h").write("', {get : function () {").exists(ctx.get(["isDatum"], false),ctx,{"else":body_3,"block":body_10},null).write("},set : function () { throw new Error('Readonly'); }});");}function body_3(chk,ctx){return chk.helper("select",ctx,{"block":body_4},{"key":ctx.get(["type"], false)});}function body_4(chk,ctx){return chk.helper("eq",ctx,{"block":body_5},{"value":"List"}).helper("eq",ctx,{"block":body_6},{"value":"Data"}).helper("eq",ctx,{"block":body_7},{"value":"Text"}).helper("eq",ctx,{"block":body_8},{"value":"AnyPointer"}).helper("default",ctx,{"block":body_9},null);}function body_5(chk,ctx){return chk.write(" return new rt.List(sig); ");}function body_6(chk,ctx){return chk.write(" return new rt.Data(sig); ");}function body_7(chk,ctx){return chk.write(" return new rt.Text(sig); ");}function body_8(chk,ctx){return chk.write("switch (").helper("pointer.type",ctx,{},{"segment":"segment","p":"pointerSection"}).write(") {case ").helper("pointer.STRUCT",ctx,{},null).write(":return new AnyStruct(sig1);case ").helper("pointer.LIST",ctx,{},null).write(":return new AnyList(sig2);/* Follow Far pointers and resolve to Struct or List. */}/** AnyPointer resolves to an interface for* reinterpret casting (safety it up as much as* possible)--AnyType()(?).*/");}function body_9(chk,ctx){return chk.write(" return new rt.").reference(ctx.get(["type"], false),ctx,"h").write("Reader(sig); ");}function body_10(chk,ctx){return chk.write("return ").partial(body_11,ctx,{"segment":"segment","begin":"dataSection"}).write(";");}function body_11(chk,ctx){return chk.write("primitive/").reference(ctx.get(["type"], false),ctx,"h");}function body_12(chk,ctx){return chk.write("/** Expose child structs as static members on the owning struct.  Expose root* structs as exports.*/").exists(ctx.get(["owner"], false),ctx,{"else":body_13,"block":body_14},null).write("/* Common base class for `instanceof` use */structs['").reference(ctx.get(["id"], false),ctx,"h").write("'].prototype = new Struct();");}function body_13(chk,ctx){return chk.write("exports.").reference(ctx.get(["name"], false),ctx,"h").write(" = structs['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}function body_14(chk,ctx){return chk.write("structs['").reference(ctx.get(["owner"], false),ctx,"h").write("'].").reference(ctx.get(["name"], false),ctx,"h").write(" = structs['").reference(ctx.get(["id"], false),ctx,"h").write("'];");}return body_0;})();
(function(){dust.register("offset/distance",body_0);function body_0(chk,ctx){return chk.write("(lhs.byteOffset < rhs.byteOffset ? rhs.byteOffset - lhs.byteOffset : lhs.byteOffset - rhs.byteOffset)");}return body_0;})();
(function(){dust.register("offset/isFar",body_0);function body_0(chk,ctx){return chk.write("(b1.buffer == b2.buffer)");}return body_0;})();
(function(){dust.register("offset/isNegative",body_0);function body_0(chk,ctx){return chk.write("(lhs.byteOffset < rhs.byteOffset)");}return body_0;})();