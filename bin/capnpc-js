#!/usr/bin/env node

var path = require('path');
var spawn = require('child_process').spawn;
var Buffers = require('buffers');
var render = require('../index');

var file = process.argv[process.argv.length-1];
var capnp = spawn('capnpc', ['-ocat', path.resolve(file)]);

var n;
var buffers = new Buffers();
var sizes=[];
var start;
capnp.stdout.on('readable', function() {
    var chunk;
    var segment;
    while (null !== (chunk=capnp.stdout.read())) {
        if (n === undefined) {
            n = chunk.readUInt32LE(0) + 1;
            for (var i=0; i<n; ++i) {
                var size = 8*chunk.readUInt32LE(4*(i+1));
                sizes.push(size);
            }

            start = 4*n + (n%2 ? 4 : 8);
        }

        buffers.push(chunk);
    }
});

capnp.stdout.on('end', function() {
    var CGR = require('../lib/cgr/readers');
    var context = require('../lib/context');

    var segments = [];
    for (var i=0; i<sizes.length; ++i) {
        segments.push(new Uint8Array(buffers.slice(start, start+sizes[i])));
        start += sizes[i];
    }

    if (start !== buffers.length) {
        throw new Error('All data has not been included');
    }

    var Arena = require('capnp-js/reader/Arena');
    var arena = new Arena(segments, +Infinity, +Infinity);

    var request = CGR.CodeGeneratorRequest.deref(
        arena,
        {
            segment : arena.getSegment(0),
            position : 0
        },
        0
    );

    var files = request.getRequestedFiles();
    var nodes = request.getNodes();
    var trees = files.map(function (f) { return context(f, nodes); });

    var dir = tree.name + '.d';

    // Leave existing permissions unaltered
    if (!fs.existsSync(dir))
        fs.mkdirSync(dir, 292); // 100100100 (read-only for all)

    var files = [
        'rTypes',
        'rScope',
        'constants',
        'readers',
        'bTypes',
        'bScope',
        'builders'
    ];

    trees.forEach(function (tree) {
        for (var file in files) {
            var filename = dir + '/' + file + '.js';

            if (fs.existsSync(file)) {
                process.stderr.write('File already exists: ' + filename + '\n');
                return;
            }

            render[file](tree).done(
                function (rendering) {
                    fs.writeFileSync(filename, rendering, { mode : 292 });
                },
                function (err) {
                    process.stderr.write('Dust rendering error: ' + err + '\n');
                }
            );
        }
    });
});
