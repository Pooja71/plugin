#!/usr/bin/env node

var path = require('path');
var spawn = require('child_process').spawn;

var file = process.argv[process.argv.length-1];
var capnp = spawn('capnpc', ['-ostdout', path.resolve(file)]);

var repl = require('repl');

var nSegments = 0;
var sizes = [];
var segments = [];

function start(nSegments) {
    var begin = 4 * (nSegments + 1);
    begin += begin%8 ? 4 : 0;
    return begin;
}

var begin;
var end;
var next = [];
capnp.stdout.on('readable', function() {
    var chunk;
    while (null !== (chunk=capnp.stdout.read())) {
        if (!nSegments) {
            nSegments = chunk.readUInt32LE(0) + 1;
            for (var i=0; i<nSegments; ++i) {
                sizes.push(chunk.readUInt32LE(4*(i+1)));
            }

            begin = start(nSegments);
            end = begin + sizes[0];
        }

        while (end <= chunk.length) {
            // Populate segments until we run off the end.
            next.push(chunk.slice(begin, end));
            segments.push(new Uint8Array(Buffer.concat(next, sizes.shift())));

            next = [chunk.slice(end)];
            begin = end;
            end = sizes[0] - (chunk.length - begin);
        }

        next.push(chunk.slice(begin))
        end -= (chunk.length - begin);

        begin=0;
    }
});

var CapnpJS = require('../');
var generator = CapnpJS.generator;
capnp.stdout.on('end', function() {
    var request = generator.CodeGeneratorRequest.deref(segments, segments[0], 0);
    var repl = require('repl');
    var prompt = repl.start("> ");
    prompt.context.request = request;
    prompt.context.obj = require('capnp-js').objectify;
});
